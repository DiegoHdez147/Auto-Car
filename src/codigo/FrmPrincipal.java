/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package codigo;

import java.awt.List;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import codigo.Tokens;
import Presentacion.Diseño.Directorio;
import Presentacion.Diseño.NumeroLinea;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author kamia
 */
public class FrmPrincipal extends javax.swing.JFrame {

    NumeroLinea numerolinea;
    Directorio dir;
    DefaultTableModel modelo = new DefaultTableModel();
    String resultado="";
    static ArrayList <String> genErrores = new ArrayList();
    /**
     * Creates new form Principal
     */
    public FrmPrincipal() {
        initComponents();
        inicializar();
        modelo.addColumn("Componente Lexico");
        modelo.addColumn("Lexema");
        LlenarTabla();
        Colores();
    }

    private void inicializar() {
        dir = new Directorio();

        setTitle("Auto-Car");
        String[] options = new String[]{"Guardar y continuar", "Descargar"};
    }
    
    public void limpiarTabla(JTable tabla){              //BORRAR TABLA                  
        try {
            DefaultTableModel modelo=(DefaultTableModel) tabla.getModel();
            int filas=tabla.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
        showMessageDialog(null, "Error al limpiar la tabla.");
        }
    }

    

    private void LlenarTabla() {
        limpiarTabla(tblTokens);
        tblTokens.setModel(modelo);
        numerolinea = new NumeroLinea(jtpCode);
        jScrollPane2.setRowHeaderView(numerolinea);
    }

    public void clearAllComp() {
        jtaCompile.setText("");
    }
    
    private void analizarLexico(){
        int cont = 1;
        
    /*    String expr = (String) tblTokens.getValue(i,0) + tblTokens.getValue(i,1);
        Lexer lexer = new Lexer(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null){
                txtLexico.setText(resultado);
                return;
            }
        }
        */
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnTokens = new javax.swing.JButton();
        btnCompilar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTokens = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpCode = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtaCompile = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1366, 768));

        jPanel1.setBackground(new java.awt.Color(17, 63, 100));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/003-diskette.png"))); // NOI18N
        btnGuardar.setBorder(null);
        btnGuardar.setBorderPainted(false);
        btnGuardar.setContentAreaFilled(false);
        btnGuardar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/003-diskette-green.png"))); // NOI18N
        btnGuardar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/003-diskette-blue.png"))); // NOI18N
        btnGuardar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/003-diskette-blue.png"))); // NOI18N
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/002-new-document.png"))); // NOI18N
        btnNuevo.setBorder(null);
        btnNuevo.setBorderPainted(false);
        btnNuevo.setContentAreaFilled(false);
        btnNuevo.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/002-new-document-green.png"))); // NOI18N
        btnNuevo.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/002-new-document-blue.png"))); // NOI18N
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/001-open.png"))); // NOI18N
        btnAbrir.setBorder(null);
        btnAbrir.setBorderPainted(false);
        btnAbrir.setContentAreaFilled(false);
        btnAbrir.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/001-open-green.png"))); // NOI18N
        btnAbrir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/001-open-blue.png"))); // NOI18N
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnTokens.setIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/004-chip.png"))); // NOI18N
        btnTokens.setBorder(null);
        btnTokens.setBorderPainted(false);
        btnTokens.setContentAreaFilled(false);
        btnTokens.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/004-chip-green.png"))); // NOI18N
        btnTokens.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/004-chip-blue.png"))); // NOI18N
        btnTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTokensActionPerformed(evt);
            }
        });

        btnCompilar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/001-play.png"))); // NOI18N
        btnCompilar.setBorder(null);
        btnCompilar.setBorderPainted(false);
        btnCompilar.setContentAreaFilled(false);
        btnCompilar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/001-play-green.png"))); // NOI18N
        btnCompilar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/codigo/001-play-blue.png"))); // NOI18N
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnNuevo)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnAbrir)
                .addGap(18, 18, 18)
                .addComponent(btnTokens)
                .addGap(18, 18, 18)
                .addComponent(btnCompilar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAbrir)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnTokens, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnCompilar, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnNuevo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(17, 63, 100));

        tblTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblTokens);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jtpCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtpCodeKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jtpCode);

        jtaCompile.setColumns(20);
        jtaCompile.setRows(5);
        jScrollPane3.setViewportView(jtaCompile);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1090, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        jtaCompile.setText("");
        dir.Nuevo(this);
        clearAllComp();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        dir.Guardar(this);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        dir.Abrir(this);
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void jtpCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtpCodeKeyReleased
        int keyCode = evt.getKeyCode();
        if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 49 && keyCode <= 57)
                || (keyCode >= 97 && keyCode <= 122) || (keyCode != 27 || !(keyCode >= 37
                && keyCode <= 40) && !(keyCode >= 16
                && keyCode <= 18) && keyCode != 524
                && keyCode != 20)) {
            if (!getTitle().contains("*")) {
                setTitle(getTitle() + "*");
            }
        }
    }//GEN-LAST:event_jtpCodeKeyReleased
    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        // TODO add your handling code here:
        limpiarTabla(tblTokens);
        jPanel2.setVisible(false);
        jtaCompile.setText("");
        String ST = jtpCode.getText();
        Sintax s = new Sintax(new codigo.LexerCup(new StringReader(ST)));
        
        try {
            s.parse();
            int cont = 1;
            String temp ="";
            Symbol sym = s.getS();
            for(int i=0;i<genErrores.size();i++){
                    temp=temp+"En la linea " + genErrores.get(i)+"\n";
            }
            if (genErrores.size()>0){
            //jtaCompile.setForeground(new Color(25,111,61));
            jtaCompile.setForeground(Color.red);
            jtaCompile.setText("Se detectaron errores en el codigo: \n"+temp);
            genErrores.clear();
            }else{
                jtaCompile.setForeground(new Color(25,111,61));
                jtaCompile.setText("Analisis realizado correctamente");
            }
        } catch (Exception ex) {
            Symbol sym = s.getS();
            jtaCompile.setForeground(Color.red);
            jtaCompile.setText("Error de sintactico en la Linea: " + (sym.right + 1) + ", Texto: \"" + sym.value +"\"");
        }
            
    }//GEN-LAST:event_btnCompilarActionPerformed

    private void btnTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTokensActionPerformed
        // TODO add your handling code here:
        jPanel2.setVisible(true);
        File archivo = new File("archivo.txt");
        PrintWriter escribir;
        LlenarTabla();
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(jtpCode.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            resultado = "";
            int cont = 1;
            while (true) {
                Object datos[]=new Object[2];
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    return;
                }
                switch (tokens) {
                    case INICIO:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case FIN:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case PARAR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case IZQUIERDA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case DERECHA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case GIRAR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case CICLO:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case BANDERA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case VERDAD:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case FALSO:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case CONDICION:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case AVANZAR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case RETROCEDER:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case DIGITAL:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case ANALOGO:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case LUZ:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case SENSOR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case ENTRADA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case SALIDA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case PROXIMIDAD:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case ESTADO:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case DELANTERA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case TRASERA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case CABINA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case RUEDAS:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case BAJAR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case SUBIR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case CERRAR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case ABRIR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case GANCHO:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case BOCINA:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case ENTERO:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case PRINCIPAL:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case ROMPER:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case REPETIR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case OPCION:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case EVALUAR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case NORTE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case SUR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case ESTE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case OESTE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case NORESTE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case NOROESTE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case SURESTE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case SUROESTE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case NINGUNO:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case CORCHI:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case CORCHD:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case PARENTESISI:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case PARENTESISD:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case IGUALQUE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case DIFERENTEDE:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case MAYORIGUAL:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case MENORIGUAL:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case MENOR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case MAYOR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case OR:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case AND:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case NOT:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case FINLI:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case Asignacion:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case UNO:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case CERO:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case NumeroEnt:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;             
                    case Suma:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case Igual:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case Resta:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case Multiplicacion:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case Division:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case Identificador:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case LINEA:
                        cont++;
                        System.out.println(cont+","+lexer.yytext());
                        break;
                    case Numero: 
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case COMILLA: 
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                     case VARIABLE: 
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        break;
                    case ERRORP:
                        //resultado ="Es un error";
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        jtaCompile.setForeground(Color.red);
                        resultado +="Error Léxico en la linea "+ cont + ": la cadena: "+ lexer.yytext() +" no es valida \n";
                        jtaCompile.setText(resultado);   
                        break;
                    case ERROR1:
                        jtaCompile.setForeground(Color.red);
                        resultado +="Error Léxico 1 en la linea "+ cont + ": Intentaste inicializar una variable con un número excedente de $ : "+ lexer.yytext() +" \n";
                        jtaCompile.setText(resultado);   
                         break;
                    case ERROR2:
                        datos[0]=tokens;
                        datos[1]=lexer.yytext();
                        modelo.addRow(datos);
                        jtaCompile.setForeground(Color.red);
                        resultado +="Error Léxico 2 en la linea "+ cont + ": Intentaste declarar un número con mas de un punto decimal : "+ lexer.yytext() +" \n";
                        jtaCompile.setText(resultado);   
                         break;
                    case ERROR:
                        jtaCompile.setForeground(Color.red);
                        resultado +="Error Léxico en la linea: "+ cont + " el caracter : "+ lexer.yytext() +" no existe\n";
                        jtaCompile.setText(resultado);   
                }
                if(resultado.equals("")){
                    jtaCompile.setForeground(new Color(25,111,61));
                    jtaCompile.setText("Analisis Lexico Exitoso");   
                }
            }
           
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnTokensActionPerformed
    //Mestodo para encontrar las ultimas cadenas
    private int findLastNonWordChar(String text, int index) {
        while (--index >= 0) {
            // \\W = [A-Za-z0-9]
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
        }
        
        return index;
    }
    
    //Metodo para encontrar las primeras cadenas
    private int findFirstNonWordChar(String text, int index)
    {
        while(index < text.length())
        {
            if(String.valueOf(text.charAt(index)).matches("\\W"))
            {
                break;
            }
            index++;
        }
        
        return index;
    }
    
    //Metodo para pintar las palabras  reservadas
    private void Colores()
    {
        final StyleContext cont = StyleContext.getDefaultStyleContext();
        //Colores
        final AttributeSet  attpink = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(231, 54, 145));
        final AttributeSet  attgreen = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 129, 0));
        final AttributeSet  attblue = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 122, 204));
        final AttributeSet  attblack = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0,0,0));
        final AttributeSet  attorange = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 133, 51));
        
        //Estylo 
        DefaultStyledDocument doc =new DefaultStyledDocument()
        {
            public void insertString(int offset, String str, AttributeSet a) throws BadLocationException
            {
                super.insertString(offset, str, a);
                String text = getText(0,getLength());
                int before = findLastNonWordChar(text,offset);
                if(before < 0 )
                {
                    before = 0;
                }
                
                int after = findFirstNonWordChar(text,offset+str.length());
                int wordL = before;
                int wordR = before;
                
                while(wordR <= after)
                {
                    if(wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W"))
                    {
                        if(text.substring(wordL,wordR).matches("(\\W)*(CICLO|CONDICION|OPCION|EVALUAR|REPETIR|FUNCION)"))
                        {
                            setCharacterAttributes(wordL,wordR - wordL,attpink,false);
                        }
                        else if(text.substring(wordL,wordR).matches("(\\W)*(PRINCIPAL|DIGITAL|ANALOGO|ENTERO|FUNCION|INICIO|FIN|VERDADERO|FALSO|NINGUNO|ESTADO)"))
                        {
                            setCharacterAttributes(wordL,wordR - wordL,attblue,false);
                        }
                        else if(text.substring(wordL,wordR).matches("(\\W)*(SENSOR|CABINA|RUEDAS|GANCHO|AVANZAR|RETROCEDER|LUZ|DELANTERA|TRASERA|GIRAR|PARAR)"))
                        {
                            setCharacterAttributes(wordL,wordR - wordL,attorange,false);
                        }
                        else if(text.substring(wordL,wordR).matches("(\\W)*(Numero|IZQUIERDA|DERECHA|BAJAR|SUBIR|ABRIR|CERRAR|Identificador|NORTE|NORESTE|ESTE|SURESTE|SUR|SUROESTE|OESTE|NOROESTE)"))
                        {
                            setCharacterAttributes(wordL,wordR - wordL,attgreen,false);
                        }
                        else
                        {
                            setCharacterAttributes(wordL,wordR - wordL,attblack,false);
                        }
                        wordL = wordR; 
                    }
                    wordR++;
                }
            }
            public void remove(int offs, int len) throws BadLocationException 
            {
                super.remove(offs, len);
                String text = getText(0,getLength());
                int before = findLastNonWordChar(text,offs);
                
                if(before < 0 )
                {
                    before = 0;
                }
            }
        };
        
        JTextPane txt = new JTextPane(doc);
        String temp = jtpCode.getText();
        jtpCode.setStyledDocument(txt.getStyledDocument());
        jtpCode.setText(temp);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnTokens;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTextArea jtaCompile;
    public javax.swing.JTextPane jtpCode;
    private javax.swing.JTable tblTokens;
    // End of variables declaration//GEN-END:variables
}
