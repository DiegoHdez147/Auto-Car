
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 22 12:16:45 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 22 12:16:45 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\276\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\004\000\002\002\005\000\002\003\003" +
    "\000\002\003\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\044\007\000\002\044\007\000\002\044\007" +
    "\000\002\044\007\000\002\044\007\000\002\044\007\000" +
    "\002\044\007\000\002\044\007\000\002\044\007\000\002" +
    "\044\007\000\002\044\006\000\002\044\006\000\002\044" +
    "\006\000\002\044\006\000\002\044\006\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\044\006\000\002\044\006\000\002\044\006\000\002" +
    "\044\007\000\002\044\006\000\002\044\007\000\002\044" +
    "\005\000\002\044\005\000\002\052\002\000\002\044\010" +
    "\000\002\044\004\000\002\044\004\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\051\003\000\002" +
    "\051\003\000\002\005\011\000\002\005\012\000\002\011" +
    "\007\000\002\011\006\000\002\011\006\000\002\012\007" +
    "\000\002\012\007\000\002\012\014\000\002\012\014\000" +
    "\002\012\013\000\002\012\013\000\002\012\012\000\002" +
    "\053\002\000\002\012\024\000\002\006\003\000\002\006" +
    "\004\000\002\007\010\000\002\007\007\000\002\007\007" +
    "\000\002\007\010\000\002\007\007\000\002\007\010\000" +
    "\002\007\007\000\002\007\006\000\002\010\007\000\002" +
    "\010\006\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\015\007\000\002\015\007\000\002\020\011\000\002" +
    "\020\010\000\002\017\007\000\002\021\011\000\002\023" +
    "\011\000\002\023\010\000\002\023\013\000\002\023\012" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\026\013\000\002\027\013\000\002\030" +
    "\013\000\002\030\013\000\002\031\006\000\002\032\007" +
    "\000\002\032\007\000\002\032\007\000\002\032\007\000" +
    "\002\032\006\000\002\033\011\000\002\033\011\000\002" +
    "\033\011\000\002\033\011\000\002\034\010\000\002\034" +
    "\010\000\002\034\010\000\002\034\005\000\002\035\006" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\036\015\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\037\007\000\002\037\007\000\002\024\003\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\004\004\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\052\002\ufffe\012\024\013\020\016\055\017\023\020" +
    "\052\023\033\024\027\025\044\026\015\027\040\030\042" +
    "\031\034\032\045\036\050\047\046\050\030\052\051\054" +
    "\013\101\016\001\002\000\054\002\ufff8\012\ufff8\013\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\036\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\054\ufff8\101\ufff8\001\002\000" +
    "\054\002\ufff2\012\ufff2\013\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\036\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\054\ufff2\101\ufff2\001\002\000\054\002\ufff0\012\ufff0\013" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\036\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0\101\ufff0\001\002" +
    "\000\004\077\u0140\001\002\000\054\002\ufff3\012\ufff3\013" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\036\ufff3\047" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\054\ufff3\101\ufff3\001\002" +
    "\000\056\002\uffc4\005\u0134\012\uffc4\013\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\036\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\054\uffc4\101\uffc4\001\002\000\004\005\u0123" +
    "\001\002\000\054\002\ufffc\012\ufffc\013\020\016\055\017" +
    "\023\020\052\023\033\024\027\025\044\026\015\027\040" +
    "\030\042\031\034\032\045\036\050\047\046\050\030\051" +
    "\ufffc\052\051\054\013\101\016\001\002\000\004\077\u0115" +
    "\001\002\000\054\002\uffed\012\uffed\013\uffed\016\uffed\017" +
    "\uffed\020\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\036\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\054\uffed\101\uffed\001\002\000\054\002\ufffa" +
    "\012\ufffa\013\ufffa\016\ufffa\017\ufffa\020\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\036\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa\101" +
    "\ufffa\001\002\000\004\077\u010e\001\002\000\004\002\uffff" +
    "\001\002\000\006\002\ufffd\012\u010d\001\002\000\054\002" +
    "\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4\020\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\036\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4" +
    "\101\ufff4\001\002\000\004\077\375\001\002\000\004\077" +
    "\366\001\002\000\054\002\uffe9\012\uffe9\013\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\036\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\054\uffe9\101\uffe9\001\002\000\054\002" +
    "\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\020\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\036\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\054\ufff9" +
    "\101\ufff9\001\002\000\004\077\306\001\002\000\004\077" +
    "\274\001\002\000\054\002\ufff5\012\ufff5\013\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\036\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\054\ufff5\101\ufff5\001\002\000\054\002" +
    "\ufff6\012\ufff6\013\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\036\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\054\ufff6" +
    "\101\ufff6\001\002\000\054\002\uffeb\012\uffeb\013\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\036\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\054\uffeb\101\uffeb\001\002\000\056" +
    "\002\uffc3\005\260\012\uffc3\013\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\036\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\054\uffc3\101\uffc3\001\002\000\054\002\uffea\012\uffea" +
    "\013\uffea\016\uffea\017\uffea\020\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\036\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea\101\uffea\001" +
    "\002\000\056\002\uffc5\005\241\012\uffc5\013\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\036\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\054\uffc5\101\uffc5\001\002\000\054\002" +
    "\uffe8\012\uffe8\013\uffe8\016\uffe8\017\uffe8\020\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\036\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\054\uffe8" +
    "\101\uffe8\001\002\000\004\077\230\001\002\000\004\077" +
    "\225\001\002\000\012\043\205\044\207\045\206\046\204" +
    "\001\002\000\054\002\ufff1\012\ufff1\013\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\036\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\054\ufff1\101\ufff1\001\002\000\004\100\165" +
    "\001\002\000\004\077\124\001\002\000\004\011\120\001" +
    "\002\000\054\002\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\036\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\054\ufff7\101\ufff7\001\002\000\054\002\uffec\012" +
    "\uffec\013\uffec\016\uffec\017\uffec\020\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\036" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec\101\uffec" +
    "\001\002\000\006\041\060\042\061\001\002\000\054\002" +
    "\uffef\012\uffef\013\uffef\016\uffef\017\uffef\020\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\036\uffef\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef" +
    "\101\uffef\001\002\000\054\002\uffee\012\uffee\013\uffee\016" +
    "\uffee\017\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\036\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\054\uffee\101\uffee\001\002\000\004" +
    "\077\077\001\002\000\004\077\062\001\002\000\006\014" +
    "\064\015\063\001\002\000\006\102\uff5a\117\uff5a\001\002" +
    "\000\006\102\uff59\117\uff59\001\002\000\004\117\066\001" +
    "\002\000\012\006\067\114\070\115\071\116\072\001\002" +
    "\000\004\102\076\001\002\000\004\102\075\001\002\000" +
    "\004\102\074\001\002\000\004\102\073\001\002\000\054" +
    "\002\uff74\012\uff74\013\uff74\016\uff74\017\uff74\020\uff74\023" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\036\uff74\047\uff74\050\uff74\051\uff74\052\uff74\054" +
    "\uff74\101\uff74\001\002\000\054\002\uff73\012\uff73\013\uff73" +
    "\016\uff73\017\uff73\020\uff73\023\uff73\024\uff73\025\uff73\026" +
    "\uff73\027\uff73\030\uff73\031\uff73\032\uff73\036\uff73\047\uff73" +
    "\050\uff73\051\uff73\052\uff73\054\uff73\101\uff73\001\002\000" +
    "\054\002\uff72\012\uff72\013\uff72\016\uff72\017\uff72\020\uff72" +
    "\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031" +
    "\uff72\032\uff72\036\uff72\047\uff72\050\uff72\051\uff72\052\uff72" +
    "\054\uff72\101\uff72\001\002\000\054\002\uff75\012\uff75\013" +
    "\uff75\016\uff75\017\uff75\020\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\036\uff75\047" +
    "\uff75\050\uff75\051\uff75\052\uff75\054\uff75\101\uff75\001\002" +
    "\000\022\055\101\056\107\057\106\060\110\061\102\062" +
    "\100\063\105\064\103\001\002\000\004\102\uff5d\001\002" +
    "\000\004\102\uff64\001\002\000\004\102\uff63\001\002\000" +
    "\004\102\uff5f\001\002\000\004\102\111\001\002\000\004" +
    "\102\uff61\001\002\000\004\102\uff62\001\002\000\004\102" +
    "\uff60\001\002\000\004\102\uff5e\001\002\000\004\010\112" +
    "\001\002\000\004\016\113\001\002\000\004\041\114\001" +
    "\002\000\004\077\115\001\002\000\004\102\116\001\002" +
    "\000\004\010\117\001\002\000\054\002\uff65\012\uff65\013" +
    "\uff65\016\uff65\017\uff65\020\uff65\023\uff65\024\uff65\025\uff65" +
    "\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65\036\uff65\047" +
    "\uff65\050\uff65\051\uff65\052\uff65\054\uff65\101\uff65\001\002" +
    "\000\046\013\020\016\055\017\023\020\052\023\033\024" +
    "\027\025\044\026\015\027\040\030\042\031\034\032\045" +
    "\036\050\047\046\050\030\052\051\054\013\101\016\001" +
    "\002\000\004\012\122\001\002\000\004\017\023\001\002" +
    "\000\054\002\uff99\012\uff99\013\uff99\016\uff99\017\uff99\020" +
    "\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99" +
    "\031\uff99\032\uff99\036\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\054\uff99\101\uff99\001\002\000\014\005\132\006\126" +
    "\114\125\115\127\116\130\001\002\000\016\066\135\067" +
    "\137\070\134\071\133\072\136\073\141\001\002\000\016" +
    "\066\135\067\137\070\134\071\133\072\136\073\141\001" +
    "\002\000\016\066\135\067\137\070\134\071\133\072\136" +
    "\073\141\001\002\000\016\066\135\067\137\070\134\071" +
    "\133\072\136\073\141\001\002\000\004\102\147\001\002" +
    "\000\016\066\135\067\137\070\134\071\133\072\136\073" +
    "\141\001\002\000\014\005\uff85\006\uff85\114\uff85\115\uff85" +
    "\116\uff85\001\002\000\014\005\uff86\006\uff86\114\uff86\115" +
    "\uff86\116\uff86\001\002\000\014\005\uff88\006\uff88\114\uff88" +
    "\115\uff88\116\uff88\001\002\000\014\005\uff84\006\uff84\114" +
    "\uff84\115\uff84\116\uff84\001\002\000\014\005\uff87\006\uff87" +
    "\114\uff87\115\uff87\116\uff87\001\002\000\014\005\146\006" +
    "\142\114\143\115\144\116\145\001\002\000\014\005\uff83" +
    "\006\uff83\114\uff83\115\uff83\116\uff83\001\002\000\010\021" +
    "\uff93\022\uff93\102\uff93\001\002\000\010\021\uff91\022\uff91" +
    "\102\uff91\001\002\000\010\021\uff90\022\uff90\102\uff90\001" +
    "\002\000\010\021\uff92\022\uff92\102\uff92\001\002\000\010" +
    "\021\uff8b\022\uff8b\102\uff8b\001\002\000\004\011\150\001" +
    "\002\000\046\013\020\016\055\017\023\020\052\023\033" +
    "\024\027\025\044\026\015\027\040\030\042\031\034\032" +
    "\045\036\050\047\046\050\030\052\051\054\013\101\016" +
    "\001\002\000\004\012\152\001\002\000\054\002\uff98\012" +
    "\uff98\013\uff98\016\uff98\017\uff98\020\uff98\023\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\036" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\054\uff98\101\uff98" +
    "\001\002\000\006\005\155\116\154\001\002\000\010\021" +
    "\uff89\022\uff89\102\uff89\001\002\000\010\021\uff8e\022\uff8e" +
    "\102\uff8e\001\002\000\004\005\157\001\002\000\010\021" +
    "\uff8c\022\uff8c\102\uff8c\001\002\000\006\005\162\006\161" +
    "\001\002\000\010\021\uff8a\022\uff8a\102\uff8a\001\002\000" +
    "\010\021\uff8f\022\uff8f\102\uff8f\001\002\000\004\005\164" +
    "\001\002\000\010\021\uff8d\022\uff8d\102\uff8d\001\002\000" +
    "\004\031\166\001\002\000\004\077\167\001\002\000\012" +
    "\014\064\015\063\037\171\040\173\001\002\000\004\117" +
    "\200\001\002\000\006\102\uff58\117\uff58\001\002\000\004" +
    "\117\174\001\002\000\006\102\uff57\117\uff57\001\002\000" +
    "\006\014\064\015\063\001\002\000\004\102\176\001\002" +
    "\000\004\103\177\001\002\000\054\002\uff7c\012\uff7c\013" +
    "\uff7c\016\uff7c\017\uff7c\020\uff7c\023\uff7c\024\uff7c\025\uff7c" +
    "\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\036\uff7c\047" +
    "\uff7c\050\uff7c\051\uff7c\052\uff7c\054\uff7c\101\uff7c\001\002" +
    "\000\006\037\171\040\173\001\002\000\004\102\202\001" +
    "\002\000\004\103\203\001\002\000\054\002\uff7d\012\uff7d" +
    "\013\uff7d\016\uff7d\017\uff7d\020\uff7d\023\uff7d\024\uff7d\025" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\036\uff7d" +
    "\047\uff7d\050\uff7d\051\uff7d\052\uff7d\054\uff7d\101\uff7d\001" +
    "\002\000\004\077\221\001\002\000\004\077\215\001\002" +
    "\000\004\010\214\001\002\000\004\077\210\001\002\000" +
    "\004\116\211\001\002\000\004\102\212\001\002\000\004" +
    "\010\213\001\002\000\054\002\uff70\012\uff70\013\uff70\016" +
    "\uff70\017\uff70\020\uff70\023\uff70\024\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\031\uff70\032\uff70\036\uff70\047\uff70\050" +
    "\uff70\051\uff70\052\uff70\054\uff70\101\uff70\001\002\000\054" +
    "\002\uff6e\012\uff6e\013\uff6e\016\uff6e\017\uff6e\020\uff6e\023" +
    "\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e" +
    "\032\uff6e\036\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\054" +
    "\uff6e\101\uff6e\001\002\000\004\116\216\001\002\000\004" +
    "\102\217\001\002\000\004\010\220\001\002\000\054\002" +
    "\uff71\012\uff71\013\uff71\016\uff71\017\uff71\020\uff71\023\uff71" +
    "\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032" +
    "\uff71\036\uff71\047\uff71\050\uff71\051\uff71\052\uff71\054\uff71" +
    "\101\uff71\001\002\000\004\116\222\001\002\000\004\102" +
    "\223\001\002\000\004\010\224\001\002\000\054\002\uff6f" +
    "\012\uff6f\013\uff6f\016\uff6f\017\uff6f\020\uff6f\023\uff6f\024" +
    "\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f" +
    "\036\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\054\uff6f\101" +
    "\uff6f\001\002\000\006\037\171\040\173\001\002\000\004" +
    "\102\227\001\002\000\054\002\uff7b\012\uff7b\013\uff7b\016" +
    "\uff7b\017\uff7b\020\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\031\uff7b\032\uff7b\036\uff7b\047\uff7b\050" +
    "\uff7b\051\uff7b\052\uff7b\054\uff7b\101\uff7b\001\002\000\012" +
    "\006\231\114\232\115\234\116\233\001\002\000\004\102" +
    "\240\001\002\000\004\102\237\001\002\000\004\102\236" +
    "\001\002\000\004\102\235\001\002\000\054\002\uff66\012" +
    "\uff66\013\uff66\016\uff66\017\uff66\020\uff66\023\uff66\024\uff66" +
    "\025\uff66\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\036" +
    "\uff66\047\uff66\050\uff66\051\uff66\052\uff66\054\uff66\101\uff66" +
    "\001\002\000\054\002\uff6a\012\uff6a\013\uff6a\016\uff6a\017" +
    "\uff6a\020\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a" +
    "\030\uff6a\031\uff6a\032\uff6a\036\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\052\uff6a\054\uff6a\101\uff6a\001\002\000\054\002\uff68" +
    "\012\uff68\013\uff68\016\uff68\017\uff68\020\uff68\023\uff68\024" +
    "\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\036\uff68\047\uff68\050\uff68\051\uff68\052\uff68\054\uff68\101" +
    "\uff68\001\002\000\054\002\uff6c\012\uff6c\013\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\032\uff6c\036\uff6c\047\uff6c\050\uff6c" +
    "\051\uff6c\052\uff6c\054\uff6c\101\uff6c\001\002\000\060\002" +
    "\uffc6\010\242\012\uffc6\013\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\036\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\054\uffc6\101\uffc6\104\243\001\002\000\054\002\uffe5\012" +
    "\uffe5\013\uffe5\016\uffe5\017\uffe5\020\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\036" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5\101\uffe5" +
    "\001\002\000\016\006\244\010\246\027\uffc9\114\245\115" +
    "\250\116\247\001\002\000\056\002\uffd9\010\257\012\uffd9" +
    "\013\uffd9\016\uffd9\017\uffd9\020\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\036\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\101\uffd9\001" +
    "\002\000\056\002\uffd6\010\256\012\uffd6\013\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\036\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\054\uffd6\101\uffd6\001\002\000\054\002" +
    "\uffd1\012\uffd1\013\uffd1\016\uffd1\017\uffd1\020\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\036\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\054\uffd1" +
    "\101\uffd1\001\002\000\004\010\255\001\002\000\056\002" +
    "\uffd5\010\254\012\uffd5\013\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\036\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\054\uffd5\101\uffd5\001\002\000\004\027\252\001\002\000" +
    "\004\005\253\001\002\000\054\002\uffc8\012\uffc8\013\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\036\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\054\uffc8\101\uffc8\001\002\000" +
    "\054\002\uffdf\012\uffdf\013\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\036\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\054\uffdf\101\uffdf\001\002\000\054\002\uffe1\012\uffe1\013" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\036\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\054\uffe1\101\uffe1\001\002" +
    "\000\054\002\uffdd\012\uffdd\013\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\036\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\054\uffdd\101\uffdd\001\002\000\054\002\uffe3\012\uffe3" +
    "\013\uffe3\016\uffe3\017\uffe3\020\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\036\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3\101\uffe3\001" +
    "\002\000\006\010\261\104\262\001\002\000\054\002\uffe6" +
    "\012\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\036\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\054\uffe6\101" +
    "\uffe6\001\002\000\066\002\uffcb\006\265\010\264\012\uffcb" +
    "\013\uffcb\016\uffcb\017\uffcb\020\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\036\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\101\uffcb\114" +
    "\263\115\267\116\266\001\002\000\056\002\uffd3\010\273" +
    "\012\uffd3\013\uffd3\016\uffd3\017\uffd3\020\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\036\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\101" +
    "\uffd3\001\002\000\054\002\uffd0\012\uffd0\013\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\036\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\054\uffd0\101\uffd0\001\002\000\056\002" +
    "\uffcf\010\272\012\uffcf\013\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\036\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\054\uffcf\101\uffcf\001\002\000\056\002\uffcd\010\271\012" +
    "\uffcd\013\uffcd\016\uffcd\017\uffcd\020\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\036" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\054\uffcd\101\uffcd" +
    "\001\002\000\056\002\uffd4\010\270\012\uffd4\013\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\036\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\054\uffd4\101\uffd4\001\002\000\054" +
    "\002\uffdb\012\uffdb\013\uffdb\016\uffdb\017\uffdb\020\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\036\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\054" +
    "\uffdb\101\uffdb\001\002\000\054\002\uffcc\012\uffcc\013\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\036\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\054\uffcc\101\uffcc\001\002\000" +
    "\054\002\uffce\012\uffce\013\uffce\016\uffce\017\uffce\020\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\036\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\054\uffce\101\uffce\001\002\000\054\002\uffdc\012\uffdc\013" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\036\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\054\uffdc\101\uffdc\001\002" +
    "\000\006\014\064\015\063\001\002\000\004\117\276\001" +
    "\002\000\006\037\171\040\173\001\002\000\004\102\300" +
    "\001\002\000\004\104\301\001\002\000\006\114\302\115" +
    "\303\001\002\000\004\010\305\001\002\000\004\010\304" +
    "\001\002\000\054\002\uff7e\012\uff7e\013\uff7e\016\uff7e\017" +
    "\uff7e\020\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e" +
    "\030\uff7e\031\uff7e\032\uff7e\036\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\054\uff7e\101\uff7e\001\002\000\054\002\uff7f" +
    "\012\uff7f\013\uff7f\016\uff7f\017\uff7f\020\uff7f\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\036\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\054\uff7f\101" +
    "\uff7f\001\002\000\014\005\132\006\126\114\125\115\127" +
    "\116\130\001\002\000\010\021\313\022\312\102\310\001" +
    "\002\000\060\002\uffbc\012\uffbc\013\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\313\022\312\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\036\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\054\uffbc\101\uffbc\001\002\000" +
    "\054\002\uffbd\012\uffbd\013\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\036\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\054\uffbd\101\uffbd\001\002\000\004\104\344\001\002\000" +
    "\004\104\314\001\002\000\004\011\315\001\002\000\050" +
    "\012\316\013\020\016\055\017\023\020\052\023\033\024" +
    "\027\025\044\026\015\027\040\030\042\031\034\032\045" +
    "\036\050\047\046\050\030\052\051\054\013\101\016\001" +
    "\002\000\004\022\326\001\002\000\004\012\320\001\002" +
    "\000\056\002\uffbb\012\uffbb\013\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\022\321\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\036\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\054\uffbb\101\uffbb\001\002\000\004\104\322" +
    "\001\002\000\004\011\323\001\002\000\046\013\020\016" +
    "\055\017\023\020\052\023\033\024\027\025\044\026\015" +
    "\027\040\030\042\031\034\032\045\036\050\047\046\050" +
    "\030\052\051\054\013\101\016\001\002\000\004\012\325" +
    "\001\002\000\054\002\uffb9\012\uffb9\013\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\036\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\054\uffb9\101\uffb9\001\002\000\004\104\327" +
    "\001\002\000\004\011\330\001\002\000\046\013\020\016" +
    "\055\017\023\020\052\023\033\024\027\025\044\026\015" +
    "\027\040\030\042\031\034\032\045\036\050\047\046\050" +
    "\030\052\051\054\013\101\016\001\002\000\004\012\332" +
    "\001\002\000\004\022\uffb4\001\002\000\004\022\334\001" +
    "\002\000\004\104\335\001\002\000\004\011\336\001\002" +
    "\000\004\012\337\001\002\000\004\021\340\001\002\000" +
    "\004\011\341\001\002\000\046\013\020\016\055\017\023" +
    "\020\052\023\033\024\027\025\044\026\015\027\040\030" +
    "\042\031\034\032\045\036\050\047\046\050\030\052\051" +
    "\054\013\101\016\001\002\000\004\012\343\001\002\000" +
    "\054\002\uffb3\012\uffb3\013\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\036\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\054\uffb3\101\uffb3\001\002\000\004\011\345\001\002\000" +
    "\050\012\346\013\020\016\055\017\023\020\052\023\033" +
    "\024\027\025\044\026\015\027\040\030\042\031\034\032" +
    "\045\036\050\047\046\050\030\052\051\054\013\101\016" +
    "\001\002\000\004\021\357\001\002\000\004\012\350\001" +
    "\002\000\056\002\uffba\012\uffba\013\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\351\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\036\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\054\uffba\101\uffba\001\002\000\004\104" +
    "\352\001\002\000\004\011\353\001\002\000\050\012\354" +
    "\013\020\016\055\017\023\020\052\023\033\024\027\025" +
    "\044\026\015\027\040\030\042\031\034\032\045\036\050" +
    "\047\046\050\030\052\051\054\013\101\016\001\002\000" +
    "\054\002\uffb7\012\uffb7\013\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\036\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\054\uffb7\101\uffb7\001\002\000\004\012\356\001\002\000" +
    "\054\002\uffb8\012\uffb8\013\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\036\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\054\uffb8\101\uffb8\001\002\000\004\104\360\001\002\000" +
    "\004\011\361\001\002\000\050\012\362\013\020\016\055" +
    "\017\023\020\052\023\033\024\027\025\044\026\015\027" +
    "\040\030\042\031\034\032\045\036\050\047\046\050\030" +
    "\052\051\054\013\101\016\001\002\000\054\002\uffb5\012" +
    "\uffb5\013\uffb5\016\uffb5\017\uffb5\020\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\036" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\101\uffb5" +
    "\001\002\000\004\012\364\001\002\000\054\002\uffb6\012" +
    "\uffb6\013\uffb6\016\uffb6\017\uffb6\020\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\036" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\101\uffb6" +
    "\001\002\000\054\002\uffbe\012\uffbe\013\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\036\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\054\uffbe\101\uffbe\001\002\000\006\114\367" +
    "\115\370\001\002\000\004\102\373\001\002\000\004\102" +
    "\371\001\002\000\004\010\372\001\002\000\054\002\uff5b" +
    "\012\uff5b\013\uff5b\016\uff5b\017\uff5b\020\uff5b\023\uff5b\024" +
    "\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032\uff5b" +
    "\036\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\054\uff5b\101" +
    "\uff5b\001\002\000\004\010\374\001\002\000\054\002\uff5c" +
    "\012\uff5c\013\uff5c\016\uff5c\017\uff5c\020\uff5c\023\uff5c\024" +
    "\uff5c\025\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c" +
    "\036\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\054\uff5c\101" +
    "\uff5c\001\002\000\014\005\u0102\006\376\114\377\115\u0101" +
    "\116\u0100\001\002\000\004\102\u010b\001\002\000\004\102" +
    "\u0109\001\002\000\004\102\u0107\001\002\000\004\102\u0105" +
    "\001\002\000\004\102\u0103\001\002\000\004\010\u0104\001" +
    "\002\000\054\002\uff9c\012\uff9c\013\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\036\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\054\uff9c\101\uff9c\001\002\000\056\002\uff67\010" +
    "\u0106\012\uff67\013\uff67\016\uff67\017\uff67\020\uff67\023\uff67" +
    "\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032" +
    "\uff67\036\uff67\047\uff67\050\uff67\051\uff67\052\uff67\054\uff67" +
    "\101\uff67\001\002\000\054\002\uff9d\012\uff9d\013\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\036\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\054\uff9d\101\uff9d\001\002\000\056" +
    "\002\uff6b\010\u0108\012\uff6b\013\uff6b\016\uff6b\017\uff6b\020" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\032\uff6b\036\uff6b\047\uff6b\050\uff6b\051\uff6b\052" +
    "\uff6b\054\uff6b\101\uff6b\001\002\000\054\002\uff9f\012\uff9f" +
    "\013\uff9f\016\uff9f\017\uff9f\020\uff9f\023\uff9f\024\uff9f\025" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\036\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\054\uff9f\101\uff9f\001" +
    "\002\000\056\002\uff69\010\u010a\012\uff69\013\uff69\016\uff69" +
    "\017\uff69\020\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027" +
    "\uff69\030\uff69\031\uff69\032\uff69\036\uff69\047\uff69\050\uff69" +
    "\051\uff69\052\uff69\054\uff69\101\uff69\001\002\000\054\002" +
    "\uff9e\012\uff9e\013\uff9e\016\uff9e\017\uff9e\020\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\036\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\054\uff9e" +
    "\101\uff9e\001\002\000\056\002\uff6d\010\u010c\012\uff6d\013" +
    "\uff6d\016\uff6d\017\uff6d\020\uff6d\023\uff6d\024\uff6d\025\uff6d" +
    "\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\036\uff6d\047" +
    "\uff6d\050\uff6d\051\uff6d\052\uff6d\054\uff6d\101\uff6d\001\002" +
    "\000\054\002\uffa0\012\uffa0\013\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\036\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\054\uffa0\101\uffa0\001\002\000\004\002\000\001\002" +
    "\000\014\005\132\006\126\114\125\115\127\116\130\001" +
    "\002\000\004\102\u0110\001\002\000\004\011\u0111\001\002" +
    "\000\050\012\u0112\013\020\016\055\017\023\020\052\023" +
    "\033\024\027\025\044\026\015\027\040\030\042\031\034" +
    "\032\045\036\050\047\046\050\030\052\051\054\013\101" +
    "\016\001\002\000\054\002\uff9a\012\uff9a\013\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\036\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\054\uff9a\101\uff9a\001\002\000\004\012" +
    "\u0114\001\002\000\054\002\uff9b\012\uff9b\013\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\036\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\052\uff9b\054\uff9b\101\uff9b\001\002\000\012\006" +
    "\u0116\114\u0117\115\u0118\116\u0119\001\002\000\004\102\u0120" +
    "\001\002\000\004\102\u011e\001\002\000\004\102\u011c\001" +
    "\002\000\004\102\u011a\001\002\000\004\010\u011b\001\002" +
    "\000\054\002\uff79\012\uff79\013\uff79\016\uff79\017\uff79\020" +
    "\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79" +
    "\031\uff79\032\uff79\036\uff79\047\uff79\050\uff79\051\uff79\052" +
    "\uff79\054\uff79\101\uff79\001\002\000\004\010\u011d\001\002" +
    "\000\054\002\uff78\012\uff78\013\uff78\016\uff78\017\uff78\020" +
    "\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78" +
    "\031\uff78\032\uff78\036\uff78\047\uff78\050\uff78\051\uff78\052" +
    "\uff78\054\uff78\101\uff78\001\002\000\056\002\uff76\010\u011f" +
    "\012\uff76\013\uff76\016\uff76\017\uff76\020\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\036\uff76\047\uff76\050\uff76\051\uff76\052\uff76\054\uff76\101" +
    "\uff76\001\002\000\054\002\uff77\012\uff77\013\uff77\016\uff77" +
    "\017\uff77\020\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027" +
    "\uff77\030\uff77\031\uff77\032\uff77\036\uff77\047\uff77\050\uff77" +
    "\051\uff77\052\uff77\054\uff77\101\uff77\001\002\000\004\010" +
    "\u0121\001\002\000\054\002\uff7a\012\uff7a\013\uff7a\016\uff7a" +
    "\017\uff7a\020\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027" +
    "\uff7a\030\uff7a\031\uff7a\032\uff7a\036\uff7a\047\uff7a\050\uff7a" +
    "\051\uff7a\052\uff7a\054\uff7a\101\uff7a\001\002\000\010\002" +
    "\ufffb\012\ufffb\051\ufffb\001\002\000\004\077\u0124\001\002" +
    "\000\012\026\u0129\027\u0125\030\u0127\102\u0126\001\002\000" +
    "\004\005\uff82\001\002\000\004\011\u0130\001\002\000\004" +
    "\005\uff80\001\002\000\004\005\u012a\001\002\000\004\005" +
    "\uff81\001\002\000\004\102\u012b\001\002\000\004\011\u012c" +
    "\001\002\000\050\012\u012d\013\020\016\055\017\023\020" +
    "\052\023\033\024\027\025\044\026\015\027\040\030\042" +
    "\031\034\032\045\036\050\047\046\050\030\052\051\054" +
    "\013\101\016\001\002\000\054\002\uff94\012\uff94\013\uff94" +
    "\016\uff94\017\uff94\020\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\036\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\054\uff94\101\uff94\001\002\000" +
    "\004\012\u012f\001\002\000\054\002\uff95\012\uff95\013\uff95" +
    "\016\uff95\017\uff95\020\uff95\023\uff95\024\uff95\025\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\036\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\054\uff95\101\uff95\001\002\000" +
    "\050\012\u0131\013\020\016\055\017\023\020\052\023\033" +
    "\024\027\025\044\026\015\027\040\030\042\031\034\032" +
    "\045\036\050\047\046\050\030\052\051\054\013\101\016" +
    "\001\002\000\054\002\uff96\012\uff96\013\uff96\016\uff96\017" +
    "\uff96\020\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\036\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\054\uff96\101\uff96\001\002\000\004\012\u0133" +
    "\001\002\000\054\002\uff97\012\uff97\013\uff97\016\uff97\017" +
    "\uff97\020\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\036\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\054\uff97\101\uff97\001\002\000\060\002\uffc7" +
    "\010\u0135\012\uffc7\013\uffc7\016\uffc7\017\uffc7\020\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\036\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054" +
    "\uffc7\101\uffc7\104\u0136\001\002\000\054\002\uffe7\012\uffe7" +
    "\013\uffe7\016\uffe7\017\uffe7\020\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\036\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7\101\uffe7\001" +
    "\002\000\066\002\uffca\006\u0139\010\u0137\012\uffca\013\uffca" +
    "\016\uffca\017\uffca\020\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\036\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\054\uffca\101\uffca\114\u0138\115" +
    "\u013b\116\u013a\001\002\000\054\002\uffd2\012\uffd2\013\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\036\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\054\uffd2\101\uffd2\001\002\000" +
    "\056\002\uffd8\010\u013f\012\uffd8\013\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\036\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\054\uffd8\101\uffd8\001\002\000\004\010\u013e\001" +
    "\002\000\056\002\uffda\010\u013d\012\uffda\013\uffda\016\uffda" +
    "\017\uffda\020\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\036\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\054\uffda\101\uffda\001\002\000\056\002" +
    "\uffd7\010\u013c\012\uffd7\013\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\036\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\054\uffd7\101\uffd7\001\002\000\054\002\uffde\012\uffde\013" +
    "\uffde\016\uffde\017\uffde\020\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\036\uffde\047" +
    "\uffde\050\uffde\051\uffde\052\uffde\054\uffde\101\uffde\001\002" +
    "\000\054\002\uffe4\012\uffe4\013\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\036\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\054\uffe4\101\uffe4\001\002\000\054\002\uffe2\012\uffe2" +
    "\013\uffe2\016\uffe2\017\uffe2\020\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\036\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\054\uffe2\101\uffe2\001" +
    "\002\000\054\002\uffe0\012\uffe0\013\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\036\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\054\uffe0\101\uffe0\001\002\000\004\005\u0141\001" +
    "\002\000\004\102\u0142\001\002\000\004\011\u0143\001\002" +
    "\000\004\053\u0145\001\002\000\010\012\uffb2\053\u0145\065" +
    "\uffb2\001\002\000\012\006\u0152\114\u0151\115\u0153\116\u0154" +
    "\001\002\000\006\012\u0148\065\u0149\001\002\000\004\012" +
    "\u0150\001\002\000\054\002\uffc0\012\uffc0\013\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\036\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\054\uffc0\101\uffc0\001\002\000\004\104" +
    "\u014a\001\002\000\050\013\020\016\055\017\023\020\052" +
    "\023\033\024\027\025\044\026\015\027\040\030\042\031" +
    "\034\032\045\036\050\047\046\050\030\051\u014c\052\051" +
    "\054\013\101\016\001\002\000\004\051\u014e\001\002\000" +
    "\004\010\u014d\001\002\000\004\012\uffa7\001\002\000\004" +
    "\010\u014f\001\002\000\004\012\uffa8\001\002\000\054\002" +
    "\uffbf\012\uffbf\013\uffbf\016\uffbf\017\uffbf\020\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\036\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf" +
    "\101\uffbf\001\002\000\004\104\u0168\001\002\000\004\104" +
    "\u0162\001\002\000\004\104\u015c\001\002\000\004\104\u0155" +
    "\001\002\000\052\010\u0156\013\020\016\055\017\023\020" +
    "\052\023\033\024\027\025\044\026\015\027\040\030\042" +
    "\031\034\032\045\036\050\047\046\050\030\051\u0158\052" +
    "\051\054\013\101\016\001\002\000\010\012\uffa9\053\uffa9" +
    "\065\uffa9\001\002\000\004\051\u015a\001\002\000\004\010" +
    "\u0159\001\002\000\010\012\uffaa\053\uffaa\065\uffaa\001\002" +
    "\000\004\010\u015b\001\002\000\010\012\uffab\053\uffab\065" +
    "\uffab\001\002\000\050\013\020\016\055\017\023\020\052" +
    "\023\033\024\027\025\044\026\015\027\040\030\042\031" +
    "\034\032\045\036\050\047\046\050\030\051\u015e\052\051" +
    "\054\013\101\016\001\002\000\004\051\u0160\001\002\000" +
    "\004\010\u015f\001\002\000\010\012\uffac\053\uffac\065\uffac" +
    "\001\002\000\004\010\u0161\001\002\000\010\012\uffad\053" +
    "\uffad\065\uffad\001\002\000\050\013\020\016\055\017\023" +
    "\020\052\023\033\024\027\025\044\026\015\027\040\030" +
    "\042\031\034\032\045\036\050\047\046\050\030\051\u0164" +
    "\052\051\054\013\101\016\001\002\000\004\051\u0166\001" +
    "\002\000\004\010\u0165\001\002\000\010\012\uffaf\053\uffaf" +
    "\065\uffaf\001\002\000\004\010\u0167\001\002\000\010\012" +
    "\uffb0\053\uffb0\065\uffb0\001\002\000\004\051\u0169\001\002" +
    "\000\004\010\u016a\001\002\000\010\012\uffae\053\uffae\065" +
    "\uffae\001\002\000\006\012\uffb1\065\uffb1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\024\004\016" +
    "\005\021\011\007\015\031\017\052\020\035\021\034\023" +
    "\025\026\013\027\010\030\046\031\011\032\055\033\056" +
    "\034\020\035\053\036\036\037\040\044\030\045\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\u0121\004\016\005\021\011\007" +
    "\015\031\017\052\020\035\021\034\023\025\026\013\027" +
    "\010\030\046\031\011\032\055\033\056\034\020\035\053" +
    "\036\036\037\040\044\030\045\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\120\004\016\005\021\011\007\015\031\017\052\020\035" +
    "\021\034\023\025\026\013\027\010\030\046\031\011\032" +
    "\055\033\056\034\020\035\053\036\036\037\040\044\030" +
    "\045\042\001\001\000\002\001\001\000\004\020\122\001" +
    "\001\000\002\001\001\000\004\013\130\001\001\000\004" +
    "\014\162\001\001\000\004\014\157\001\001\000\004\014" +
    "\155\001\001\000\004\014\152\001\001\000\002\001\001" +
    "\000\004\014\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\150\004\016\005" +
    "\021\011\007\015\031\017\052\020\035\021\034\023\025" +
    "\026\013\027\010\030\046\031\011\032\055\033\056\034" +
    "\020\035\053\036\036\037\040\044\030\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\167\025\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\274\001\001\000" +
    "\002\001\001\000\004\025\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\306\001\001\000\004\012\310\001\001\000\004\012" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\316\004\016\005" +
    "\021\011\007\015\031\017\052\020\035\021\034\023\025" +
    "\026\013\027\010\030\046\031\011\032\055\033\056\034" +
    "\020\035\053\036\036\037\040\044\030\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\323\004\016" +
    "\005\021\011\007\015\031\017\052\020\035\021\034\023" +
    "\025\026\013\027\010\030\046\031\011\032\055\033\056" +
    "\034\020\035\053\036\036\037\040\044\030\045\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\330\004\016\005\021\011" +
    "\007\015\031\017\052\020\035\021\034\023\025\026\013" +
    "\027\010\030\046\031\011\032\055\033\056\034\020\035" +
    "\053\036\036\037\040\044\030\045\042\001\001\000\002" +
    "\001\001\000\004\053\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\341\004\016\005" +
    "\021\011\007\015\031\017\052\020\035\021\034\023\025" +
    "\026\013\027\010\030\046\031\011\032\055\033\056\034" +
    "\020\035\053\036\036\037\040\044\030\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\346\004\016\005\021\011\007\015\031\017\052" +
    "\020\035\021\034\023\025\026\013\027\010\030\046\031" +
    "\011\032\055\033\056\034\020\035\053\036\036\037\040" +
    "\044\030\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\354\004\016\005\021\011\007\015\031\017" +
    "\052\020\035\021\034\023\025\026\013\027\010\030\046" +
    "\031\011\032\055\033\056\034\020\035\053\036\036\037" +
    "\040\044\030\045\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\362\004\016\005\021\011\007\015\031" +
    "\017\052\020\035\021\034\023\025\026\013\027\010\030" +
    "\046\031\011\032\055\033\056\034\020\035\053\036\036" +
    "\037\040\044\030\045\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\u0112\004\016\005\021\011" +
    "\007\015\031\017\052\020\035\021\034\023\025\026\013" +
    "\027\010\030\046\031\011\032\055\033\056\034\020\035" +
    "\053\036\036\037\040\044\030\045\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u0127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\u012d\004\016\005\021\011\007\015\031\017" +
    "\052\020\035\021\034\023\025\026\013\027\010\030\046" +
    "\031\011\032\055\033\056\034\020\035\053\036\036\037" +
    "\040\044\030\045\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\u0131\004\016\005" +
    "\021\011\007\015\031\017\052\020\035\021\034\023\025" +
    "\026\013\027\010\030\046\031\011\032\055\033\056\034" +
    "\020\035\053\036\036\037\040\044\030\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u0145\007\u0143" +
    "\001\001\000\006\006\u016a\007\u0143\001\001\000\002\001" +
    "\001\000\004\010\u0146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\u014a\004\016\005" +
    "\021\011\007\015\031\017\052\020\035\021\034\023\025" +
    "\026\013\027\010\030\046\031\011\032\055\033\056\034" +
    "\020\035\053\036\036\037\040\044\030\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\u0156\004\016\005\021\011\007\015\031" +
    "\017\052\020\035\021\034\023\025\026\013\027\010\030" +
    "\046\031\011\032\055\033\056\034\020\035\053\036\036" +
    "\037\040\044\030\045\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\u015c\004\016\005" +
    "\021\011\007\015\031\017\052\020\035\021\034\023\025" +
    "\026\013\027\010\030\046\031\011\032\055\033\056\034" +
    "\020\035\053\036\036\037\040\044\030\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\u0162\004\016" +
    "\005\021\011\007\015\031\017\052\020\035\021\034\023" +
    "\025\026\013\027\010\030\046\031\011\032\055\033\056" +
    "\034\020\035\053\036\036\037\040\044\030\045\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    FrmPrincipal v=new FrmPrincipal();    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Operaciones ::= CERO OperadoresLo CERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Operaciones ::= UNO OperadoresLo UNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Operaciones ::= UNO OperadoresLo CERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Operaciones ::= CERO OperadoresLo CERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Operaciones ::= NumeroEnt OperadoresLo Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Operaciones ::= Numero OperadoresLo NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Operaciones ::= NumeroEnt OperadoresLo NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Operaciones ::= Numero OperadoresLo Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Operaciones ::= NumeroEnt OperadoresA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Operaciones ::= Numero OperadoresA NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Operaciones ::= NumeroEnt OperadoresA NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Operaciones ::= Numero OperadoresA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OperadoresLo ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OperadoresLo ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OperadoresLo ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OperadoresA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OperadoresA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OperadoresA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OperadoresA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // posicion ::= TRASERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("posicion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // posicion ::= DELANTERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("posicion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // direccion ::= IZQUIERDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("direccion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // direccion ::= DERECHA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("direccion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FUNCIONBOCINA ::= BOCINA CORCHI CERO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONBOCINA",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FUNCIONBOCINA ::= BOCINA CORCHI UNO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONBOCINA",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CARDINAL ::= NOROESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CARDINAL ::= OESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CARDINAL ::= SUROESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CARDINAL ::= SUR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CARDINAL ::= SURESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CARDINAL ::= ESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CARDINAL ::= NORESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CARDINAL ::= NORTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTROLCABINA ::= GIRAR CABINA CORCHI CARDINAL CORCHD FINLI GIRAR CABINA CORCHI CORCHD FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + "No has agregado una direccion de giro");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROLCABINA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // MOVCARRO ::= RETROCEDER CORCHI CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // MOVCARRO ::= AVANZAR CORCHI CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // MOVCARRO ::= RETROCEDER CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // MOVCARRO ::= AVANZAR CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MOVCARRO ::= RETROCEDER CORCHI NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // MOVCARRO ::= AVANZAR CORCHI NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // MOVCARRO ::= RETROCEDER CORCHI Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MOVCARRO ::= AVANZAR CORCHI Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MANEJOGANCHO ::= GANCHO CERRAR FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + "f gjn");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MANEJOGANCHO ::= GANCHO ABRIR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MANEJOGANCHO ::= GANCHO SUBIR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MANEJOGANCHO ::= GANCHO BAJAR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DETENERMOVRUEDAS ::= PARAR CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DETENERMOVRUEDAS ::= PARAR CORCHI UNO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DETENERMOVRUEDAS ::= PARAR CORCHI CERO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DETENERMOVRUEDAS ::= PARAR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DETENERMOVRUEDAS ::= PARAR CORCHI Numero CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // USARSENSOR ::= SENSOR CORCHI posicion CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("USARSENSOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OBTENERLUZ ::= ESTADO PARENTESISI LUZ CORCHI posicion COMILLA direccion CORCHD PARENTESISD 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + "Debes poner primero la direccion y luego la posicion");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBTENERLUZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OBTENERLUZ ::= ESTADO PARENTESISI LUZ CORCHI direccion COMILLA posicion CORCHD PARENTESISD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBTENERLUZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // APAGAR ::= LUZ CORCHI direccion COMILLA posicion CORCHD Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("APAGAR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ENCENDER ::= LUZ CORCHI direccion COMILLA posicion CORCHD Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCENDER",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPOS ::= ANALOGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TIPOS ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TIPOS ::= DIGITAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // RELACIONALES ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // RELACIONALES ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // RELACIONALES ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // RELACIONALES ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // RELACIONALES ::= DIFERENTEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // RELACIONALES ::= IGUALQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CondicionA ::= NumeroEnt RELACIONALES NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CondicionA ::= Numero RELACIONALES Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CondicionA ::= Identificador RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CondicionA ::= CERO RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CondicionA ::= UNO RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CondicionA ::= NumeroEnt RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CondicionA ::= Numero RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CondicionA ::= Identificador RELACIONALES CERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CondicionA ::= Identificador RELACIONALES UNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CondicionA ::= Identificador RELACIONALES NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CondicionA ::= Identificador RELACIONALES Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCIONE ::= FUNCION Identificador CORCHI TIPOS Identificador CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCIONE ::= FUNCION Identificador CORCHI TIPOS Identificador CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCIONE ::= FUNCION Identificador CORCHI CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCIONE ::= FUNCION Identificador CORCHI CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // REPETIRE ::= REPETIR CORCHI CondicionA CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIRE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BANDERAE ::= BANDERA INICIO INSTRUCCIONES FIN CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BANDERAE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CICLOS ::= CICLO CORCHI CondicionA CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CICLOS ::= CICLO CORCHI CondicionA CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AVANZARE ::= AVANZAR CORCHI Identificador CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AVANZARE ::= AVANZAR CORCHI CERO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AVANZARE ::= AVANZAR CORCHI UNO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AVANZARE ::= AVANZAR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AVANZARE ::= AVANZAR CORCHI Numero CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Valor ::= CERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Valor ::= UNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Valor ::= Operaciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Valor ::= NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Valor ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Valor ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NINGUNON ::= NINGUNO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NINGUNON",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NINGUNON ::= NINGUNO Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NINGUNON",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPCIONN ::= OPCION NumeroEnt Asignacion FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Falto agregar ROMPER antes del fin de linea");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPCIONN ::= OPCION NumeroEnt Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPCIONN ::= OPCION NumeroEnt Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPCIONN ::= OPCION CERO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPCIONN ::= OPCION CERO Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPCIONN ::= OPCION UNO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPCIONN ::= OPCION Numero Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPCIONN ::= OPCION Numero Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPCIONES ::= OPCIONN OPCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCIONES ::= OPCIONN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICIONN ::= VERDADERO Asignacion INICIO FIN FALSO Asignacion INICIO INSTRUCCIONES FIN NT$1 FALSO Asignacion INICIO FIN VERDADERO INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + "Te faltaron los : despues de Verdadero");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
v.genErrores.add((sright+1) + "Te faltaron los : despues de Verdadero");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICIONN ::= FALSO Asignacion INICIO FIN VERDADERO Asignacion INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICIONN ::= FALSO Asignacion INICIO FIN VERDADERO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICIONN ::= FALSO Asignacion INICIO INSTRUCCIONES FIN VERDADERO Asignacion INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICIONN ::= FALSO Asignacion INICIO INSTRUCCIONES FIN VERDADERO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICIONN ::= VERDADERO Asignacion INICIO INSTRUCCIONES FIN FALSO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICIONN ::= FALSO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDICIONN ::= VERDADERO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONDICIONES ::= CONDICION CORCHI CondicionA CORCHD 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se ingreso los casos de la condicion");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICIONES ::= CONDICION CORCHI CondicionA CONDICIONN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se ingreso el corchete que cierra (]) correspondiente");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICIONES ::= CONDICION CORCHI CondicionA CORCHD CONDICIONN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EVALUARE ::= EVALUAR CORCHI Identificador CORCHD INICIO OPCIONES NINGUNON FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUARE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EVALUARE ::= EVALUAR CORCHI Identificador CORCHD INICIO OPCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUARE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NumerosGeneral ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumerosGeneral",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NumerosGeneral ::= NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumerosGeneral",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACIONCONVALOR ::= DIGITAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el identificador ");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACIONCONVALOR ::= ENTERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el identificador ");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACIONCONVALOR ::= ANALOGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el identificador ");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACIONCONVALOR ::= ANALOGO Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador o la asignacion(:)");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACIONCONVALOR ::= ENTERO Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador o la asignacion(:)");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion NT$0 DIGITAL Identificador 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador o la asignacion(:)");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
v.genErrores.add((sright+1) + " No se asigno el valor al identificador y ni el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se asigno el valor al identificador y ni el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se asigno el valor al identificador y ni el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Estas intentando agregar un valor diferente a 1 y 0");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion NumeroEnt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Estas intentando agregar un valor diferente a 1 y 0");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No es asignado ningun valor al identificador");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No es asignado ningun valor al identificador");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No es asignado ningun valor al identificador");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion UNO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion CERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion CERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion UNO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion CERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion UNO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion NumeroEnt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Deberias intentar con un numero con decimales");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Deberias intentar con un numero sin decimales");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= ANALOGO Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= DIGITAL Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= ENTERO Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= DECLARACIONCONVALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= FUNCIONBOCINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= CONTROLCABINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= MOVCARRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= MANEJOGANCHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= GIRARCARRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= DETENERMOVRUEDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= USARSENSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= OBTENERLUZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= APAGAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= ENCENDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FUNCIONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= REPETIRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= BANDERAE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CONDICIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= AVANZARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= EVALUARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // START ::= PRINCIPAL INICIO INSTRUCCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No agregaste el FIN");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= PRINCIPAL INICIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No agregaste el FIN");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= PRINCIPAL INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= PRINCIPAL INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

