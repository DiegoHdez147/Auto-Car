
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 20 03:49:03 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 20 03:49:03 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\004\000\002\002\005\000\002\003\003" +
    "\000\002\003\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\007\000\002\016\007\000\002\016\007" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\016\007\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\005" +
    "\011\000\002\005\012\000\002\011\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\014\000\002\012\014\000" +
    "\002\006\003\000\002\006\004\000\002\007\010\000\002" +
    "\007\007\000\002\007\010\000\002\007\007\000\002\007" +
    "\010\000\002\007\007\000\002\007\010\000\002\007\007" +
    "\000\002\010\007\000\002\010\006\000\002\015\007\000" +
    "\002\015\007\000\002\020\011\000\002\020\010\000\002" +
    "\017\007\000\002\021\011\000\002\023\011\000\002\023" +
    "\010\000\002\023\013\000\002\023\012\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\026\013\000\002\027\013\000\002" +
    "\030\013\000\002\030\013\000\002\031\006\000\002\032" +
    "\007\000\002\032\007\000\002\032\007\000\002\032\007" +
    "\000\002\032\006\000\002\033\011\000\002\033\011\000" +
    "\002\033\011\000\002\033\011\000\002\034\010\000\002" +
    "\034\010\000\002\034\010\000\002\034\005\000\002\035" +
    "\006\000\002\035\006\000\002\035\006\000\002\035\006" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\036\010\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\037\007\000\002\037\007\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\004\004\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\056\002\ufffe\006\055\012\025\013\021\016\057\017" +
    "\024\020\052\023\033\024\030\025\044\026\016\027\042" +
    "\030\043\031\034\032\045\036\050\047\046\050\031\052" +
    "\051\054\013\101\017\116\014\001\002\000\060\002\ufff8" +
    "\006\ufff8\012\ufff8\013\ufff8\016\ufff8\017\ufff8\020\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\036\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\054" +
    "\ufff8\101\ufff8\116\ufff8\001\002\000\060\002\ufff1\006\ufff1" +
    "\012\ufff1\013\ufff1\016\ufff1\017\ufff1\020\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\036\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\101" +
    "\ufff1\116\ufff1\001\002\000\060\002\uffef\006\uffef\012\uffef" +
    "\013\uffef\016\uffef\017\uffef\020\uffef\023\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\036\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef\101\uffef\116" +
    "\uffef\001\002\000\004\077\u012d\001\002\000\020\074\125" +
    "\075\115\076\123\105\121\106\124\107\116\110\117\001" +
    "\002\000\060\002\ufff2\006\ufff2\012\ufff2\013\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\036\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\054\ufff2\101\ufff2\116\ufff2\001\002\000" +
    "\004\005\u011c\001\002\000\004\005\u010b\001\002\000\060" +
    "\002\ufffc\006\055\012\ufffc\013\021\016\057\017\024\020" +
    "\052\023\033\024\030\025\044\026\016\027\042\030\043" +
    "\031\034\032\045\036\050\047\046\050\031\051\ufffc\052" +
    "\051\054\013\101\017\116\014\001\002\000\004\077\375" +
    "\001\002\000\060\002\uffec\006\uffec\012\uffec\013\uffec\016" +
    "\uffec\017\uffec\020\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\036\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\054\uffec\101\uffec\116\uffec\001\002" +
    "\000\060\002\ufffa\006\ufffa\012\ufffa\013\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\036\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\054\ufffa\101\ufffa\116\ufffa\001\002\000\004" +
    "\077\366\001\002\000\004\002\uffff\001\002\000\006\002" +
    "\ufffd\012\365\001\002\000\060\002\ufff3\006\ufff3\012\ufff3" +
    "\013\ufff3\016\ufff3\017\ufff3\020\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\036\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\054\ufff3\101\ufff3\116" +
    "\ufff3\001\002\000\004\077\350\001\002\000\004\077\341" +
    "\001\002\000\060\002\ufff9\006\ufff9\012\ufff9\013\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\036\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\054\ufff9\101\ufff9\116\ufff9\001\002" +
    "\000\004\077\311\001\002\000\004\077\277\001\002\000" +
    "\060\002\ufff7\006\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\036\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\054\ufff7\101\ufff7\116\ufff7\001\002\000\060\002" +
    "\ufff4\006\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\036\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\054\ufff4\101\ufff4\116\ufff4\001\002\000\060\002\ufff5\006" +
    "\ufff5\012\ufff5\013\ufff5\016\ufff5\017\ufff5\020\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\036\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\054\ufff5" +
    "\101\ufff5\116\ufff5\001\002\000\060\002\uffea\006\uffea\012" +
    "\uffea\013\uffea\016\uffea\017\uffea\020\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\036" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea\101\uffea" +
    "\116\uffea\001\002\000\060\002\uffe9\006\uffe9\012\uffe9\013" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\036\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9\101\uffe9\116\uffe9" +
    "\001\002\000\004\005\264\001\002\000\004\005\251\001" +
    "\002\000\004\077\240\001\002\000\004\077\235\001\002" +
    "\000\012\043\215\044\217\045\216\046\214\001\002\000" +
    "\060\002\ufff0\006\ufff0\012\ufff0\013\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\036\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\054\ufff0\101\ufff0\116\ufff0\001\002\000\004\100" +
    "\175\001\002\000\004\077\136\001\002\000\004\011\132" +
    "\001\002\000\060\002\ufff6\006\ufff6\012\ufff6\013\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\036\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\054\ufff6\101\ufff6\116\ufff6\001\002" +
    "\000\060\002\uffeb\006\uffeb\012\uffeb\013\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\036\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\054\uffeb\101\uffeb\116\uffeb\001\002\000\020" +
    "\074\125\075\115\076\123\105\121\106\124\107\116\110" +
    "\117\001\002\000\060\002\uffe8\006\uffe8\012\uffe8\013\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\036\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\054\uffe8\101\uffe8\116\uffe8\001" +
    "\002\000\006\041\062\042\063\001\002\000\060\002\uffee" +
    "\006\uffee\012\uffee\013\uffee\016\uffee\017\uffee\020\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\036\uffee\047\uffee\050\uffee\051\uffee\052\uffee\054" +
    "\uffee\101\uffee\116\uffee\001\002\000\060\002\uffed\006\uffed" +
    "\012\uffed\013\uffed\016\uffed\017\uffed\020\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\036\uffed\047\uffed\050\uffed\051\uffed\052\uffed\054\uffed\101" +
    "\uffed\116\uffed\001\002\000\004\077\101\001\002\000\004" +
    "\077\064\001\002\000\006\014\066\015\065\001\002\000" +
    "\006\102\uff84\117\uff84\001\002\000\006\102\uff83\117\uff83" +
    "\001\002\000\004\117\070\001\002\000\012\006\071\114" +
    "\072\115\074\116\073\001\002\000\004\102\100\001\002" +
    "\000\004\102\077\001\002\000\004\102\076\001\002\000" +
    "\004\102\075\001\002\000\060\002\uff9d\006\uff9d\012\uff9d" +
    "\013\uff9d\016\uff9d\017\uff9d\020\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\036\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\101\uff9d\116" +
    "\uff9d\001\002\000\060\002\uff9e\006\uff9e\012\uff9e\013\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\023\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\036\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\054\uff9e\101\uff9e\116\uff9e\001" +
    "\002\000\060\002\uff9c\006\uff9c\012\uff9c\013\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\036\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\054\uff9c\101\uff9c\116\uff9c\001\002\000" +
    "\060\002\uff9f\006\uff9f\012\uff9f\013\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\036\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\054\uff9f\101\uff9f\116\uff9f\001\002\000\022\055" +
    "\103\056\111\057\110\060\112\061\105\062\102\063\107" +
    "\064\104\001\002\000\004\102\uff87\001\002\000\004\102" +
    "\uff8e\001\002\000\004\102\uff89\001\002\000\004\102\uff8d" +
    "\001\002\000\004\102\113\001\002\000\004\102\uff8b\001" +
    "\002\000\004\102\uff8c\001\002\000\004\102\uff8a\001\002" +
    "\000\004\102\uff88\001\002\000\004\010\114\001\002\000" +
    "\060\002\uff8f\006\uff8f\012\uff8f\013\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030" +
    "\uff8f\031\uff8f\032\uff8f\036\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\054\uff8f\101\uff8f\116\uff8f\001\002\000\006\006" +
    "\uff7c\116\uff7c\001\002\000\006\006\uff7d\116\uff7d\001\002" +
    "\000\006\006\uff7e\116\uff7e\001\002\000\006\006\130\116" +
    "\131\001\002\000\006\006\uff80\116\uff80\001\002\000\006" +
    "\006\126\116\127\001\002\000\006\006\uff7a\116\uff7a\001" +
    "\002\000\006\006\uff7f\116\uff7f\001\002\000\006\006\uff7b" +
    "\116\uff7b\001\002\000\060\002\uff75\006\uff75\012\uff75\013" +
    "\uff75\016\uff75\017\uff75\020\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\036\uff75\047" +
    "\uff75\050\uff75\051\uff75\052\uff75\054\uff75\101\uff75\116\uff75" +
    "\001\002\000\060\002\uff73\006\uff73\012\uff73\013\uff73\016" +
    "\uff73\017\uff73\020\uff73\023\uff73\024\uff73\025\uff73\026\uff73" +
    "\027\uff73\030\uff73\031\uff73\032\uff73\036\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\054\uff73\101\uff73\116\uff73\001\002" +
    "\000\060\002\uff79\006\uff79\012\uff79\013\uff79\016\uff79\017" +
    "\uff79\020\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79" +
    "\030\uff79\031\uff79\032\uff79\036\uff79\047\uff79\050\uff79\051" +
    "\uff79\052\uff79\054\uff79\101\uff79\116\uff79\001\002\000\060" +
    "\002\uff77\006\uff77\012\uff77\013\uff77\016\uff77\017\uff77\020" +
    "\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77" +
    "\031\uff77\032\uff77\036\uff77\047\uff77\050\uff77\051\uff77\052" +
    "\uff77\054\uff77\101\uff77\116\uff77\001\002\000\052\006\055" +
    "\013\021\016\057\017\024\020\052\023\033\024\030\025" +
    "\044\026\016\027\042\030\043\031\034\032\045\036\050" +
    "\047\046\050\031\052\051\054\013\101\017\116\014\001" +
    "\002\000\004\012\134\001\002\000\004\017\024\001\002" +
    "\000\060\002\uffc1\006\uffc1\012\uffc1\013\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\036\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\054\uffc1\101\uffc1\116\uffc1\001\002\000\014" +
    "\005\144\006\140\114\137\115\142\116\141\001\002\000" +
    "\016\066\147\067\153\070\145\071\146\072\150\073\151" +
    "\001\002\000\016\066\147\067\153\070\145\071\146\072" +
    "\150\073\151\001\002\000\016\066\147\067\153\070\145" +
    "\071\146\072\150\073\151\001\002\000\016\066\147\067" +
    "\153\070\145\071\146\072\150\073\151\001\002\000\004" +
    "\102\161\001\002\000\016\066\147\067\153\070\145\071" +
    "\146\072\150\073\151\001\002\000\014\005\uffb0\006\uffb0" +
    "\114\uffb0\115\uffb0\116\uffb0\001\002\000\014\005\uffaf\006" +
    "\uffaf\114\uffaf\115\uffaf\116\uffaf\001\002\000\014\005\uffb2" +
    "\006\uffb2\114\uffb2\115\uffb2\116\uffb2\001\002\000\014\005" +
    "\uffae\006\uffae\114\uffae\115\uffae\116\uffae\001\002\000\014" +
    "\005\uffad\006\uffad\114\uffad\115\uffad\116\uffad\001\002\000" +
    "\014\005\160\006\155\114\154\115\157\116\156\001\002" +
    "\000\014\005\uffb1\006\uffb1\114\uffb1\115\uffb1\116\uffb1\001" +
    "\002\000\004\102\uffb9\001\002\000\004\102\uffbb\001\002" +
    "\000\004\102\uffba\001\002\000\004\102\uffb8\001\002\000" +
    "\004\102\uffb3\001\002\000\004\011\162\001\002\000\052" +
    "\006\055\013\021\016\057\017\024\020\052\023\033\024" +
    "\030\025\044\026\016\027\042\030\043\031\034\032\045" +
    "\036\050\047\046\050\031\052\051\054\013\101\017\116" +
    "\014\001\002\000\004\012\164\001\002\000\060\002\uffc0" +
    "\006\uffc0\012\uffc0\013\uffc0\016\uffc0\017\uffc0\020\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\036\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\054" +
    "\uffc0\101\uffc0\116\uffc0\001\002\000\004\005\166\001\002" +
    "\000\004\102\uffb4\001\002\000\004\005\170\001\002\000" +
    "\004\102\uffb6\001\002\000\004\005\172\001\002\000\004" +
    "\102\uffb7\001\002\000\004\005\174\001\002\000\004\102" +
    "\uffb5\001\002\000\004\031\176\001\002\000\004\077\177" +
    "\001\002\000\012\014\066\015\065\037\201\040\203\001" +
    "\002\000\004\117\210\001\002\000\006\102\uff82\117\uff82" +
    "\001\002\000\004\117\204\001\002\000\006\102\uff81\117" +
    "\uff81\001\002\000\006\014\066\015\065\001\002\000\004" +
    "\102\206\001\002\000\004\103\207\001\002\000\060\002" +
    "\uffa6\006\uffa6\012\uffa6\013\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\036\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\054\uffa6\101\uffa6\116\uffa6\001\002\000\006\037\201\040" +
    "\203\001\002\000\004\102\212\001\002\000\004\103\213" +
    "\001\002\000\060\002\uffa7\006\uffa7\012\uffa7\013\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\036\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\054\uffa7\101\uffa7\116\uffa7\001\002" +
    "\000\004\077\231\001\002\000\004\077\225\001\002\000" +
    "\004\010\224\001\002\000\004\077\220\001\002\000\004" +
    "\116\221\001\002\000\004\102\222\001\002\000\004\010" +
    "\223\001\002\000\060\002\uff9a\006\uff9a\012\uff9a\013\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\023\uff9a\024\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\036\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\054\uff9a\101\uff9a\116\uff9a\001" +
    "\002\000\060\002\uff98\006\uff98\012\uff98\013\uff98\016\uff98" +
    "\017\uff98\020\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\036\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\054\uff98\101\uff98\116\uff98\001\002\000" +
    "\004\116\226\001\002\000\004\102\227\001\002\000\004" +
    "\010\230\001\002\000\060\002\uff9b\006\uff9b\012\uff9b\013" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\036\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b\101\uff9b\116\uff9b" +
    "\001\002\000\004\116\232\001\002\000\004\102\233\001" +
    "\002\000\004\010\234\001\002\000\060\002\uff99\006\uff99" +
    "\012\uff99\013\uff99\016\uff99\017\uff99\020\uff99\023\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\036\uff99\047\uff99\050\uff99\051\uff99\052\uff99\054\uff99\101" +
    "\uff99\116\uff99\001\002\000\006\037\201\040\203\001\002" +
    "\000\004\102\237\001\002\000\060\002\uffa5\006\uffa5\012" +
    "\uffa5\013\uffa5\016\uffa5\017\uffa5\020\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\036" +
    "\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\054\uffa5\101\uffa5" +
    "\116\uffa5\001\002\000\012\006\241\114\242\115\243\116" +
    "\244\001\002\000\004\102\250\001\002\000\004\102\247" +
    "\001\002\000\004\102\246\001\002\000\004\102\245\001" +
    "\002\000\060\002\uff94\006\uff94\012\uff94\013\uff94\016\uff94" +
    "\017\uff94\020\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\036\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\054\uff94\101\uff94\116\uff94\001\002\000" +
    "\060\002\uff90\006\uff90\012\uff90\013\uff90\016\uff90\017\uff90" +
    "\020\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\036\uff90\047\uff90\050\uff90\051\uff90" +
    "\052\uff90\054\uff90\101\uff90\116\uff90\001\002\000\060\002" +
    "\uff92\006\uff92\012\uff92\013\uff92\016\uff92\017\uff92\020\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\036\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\054\uff92\101\uff92\116\uff92\001\002\000\060\002\uff96\006" +
    "\uff96\012\uff96\013\uff96\016\uff96\017\uff96\020\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\036\uff96\047\uff96\050\uff96\051\uff96\052\uff96\054\uff96" +
    "\101\uff96\116\uff96\001\002\000\006\010\252\104\253\001" +
    "\002\000\060\002\uffe6\006\uffe6\012\uffe6\013\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\036\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\054\uffe6\101\uffe6\116\uffe6\001\002\000" +
    "\012\006\254\114\255\115\256\116\257\001\002\000\004" +
    "\010\263\001\002\000\004\010\262\001\002\000\004\010" +
    "\261\001\002\000\004\010\260\001\002\000\060\002\uffe1" +
    "\006\uffe1\012\uffe1\013\uffe1\016\uffe1\017\uffe1\020\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\036\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\054" +
    "\uffe1\101\uffe1\116\uffe1\001\002\000\060\002\uffdf\006\uffdf" +
    "\012\uffdf\013\uffdf\016\uffdf\017\uffdf\020\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\036\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\054\uffdf\101" +
    "\uffdf\116\uffdf\001\002\000\060\002\uffdd\006\uffdd\012\uffdd" +
    "\013\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\036\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\054\uffdd\101\uffdd\116" +
    "\uffdd\001\002\000\060\002\uffe3\006\uffe3\012\uffe3\013\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\036\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\054\uffe3\101\uffe3\116\uffe3\001" +
    "\002\000\006\010\265\104\266\001\002\000\060\002\uffe5" +
    "\006\uffe5\012\uffe5\013\uffe5\016\uffe5\017\uffe5\020\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\036\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054" +
    "\uffe5\101\uffe5\116\uffe5\001\002\000\012\006\267\114\270" +
    "\115\271\116\272\001\002\000\004\010\276\001\002\000" +
    "\004\010\275\001\002\000\004\010\274\001\002\000\004" +
    "\010\273\001\002\000\060\002\uffd9\006\uffd9\012\uffd9\013" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\036\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\101\uffd9\116\uffd9" +
    "\001\002\000\060\002\uffdb\006\uffdb\012\uffdb\013\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\036\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\054\uffdb\101\uffdb\116\uffdb\001\002" +
    "\000\060\002\uffdc\006\uffdc\012\uffdc\013\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\036\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\054\uffdc\101\uffdc\116\uffdc\001\002\000\060" +
    "\002\uffda\006\uffda\012\uffda\013\uffda\016\uffda\017\uffda\020" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\036\uffda\047\uffda\050\uffda\051\uffda\052" +
    "\uffda\054\uffda\101\uffda\116\uffda\001\002\000\006\014\066" +
    "\015\065\001\002\000\004\117\301\001\002\000\006\037" +
    "\201\040\203\001\002\000\004\102\303\001\002\000\004" +
    "\104\304\001\002\000\006\114\305\115\306\001\002\000" +
    "\004\010\310\001\002\000\004\010\307\001\002\000\060" +
    "\002\uffa8\006\uffa8\012\uffa8\013\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\036\uffa8\047\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\054\uffa8\101\uffa8\116\uffa8\001\002\000\060\002\uffa9" +
    "\006\uffa9\012\uffa9\013\uffa9\016\uffa9\017\uffa9\020\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\036\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\054" +
    "\uffa9\101\uffa9\116\uffa9\001\002\000\014\005\144\006\140" +
    "\114\137\115\142\116\141\001\002\000\004\102\313\001" +
    "\002\000\006\021\316\022\315\001\002\000\060\002\uffd6" +
    "\006\uffd6\012\uffd6\013\uffd6\016\uffd6\017\uffd6\020\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\036\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\054" +
    "\uffd6\101\uffd6\116\uffd6\001\002\000\004\104\330\001\002" +
    "\000\004\104\317\001\002\000\004\011\320\001\002\000" +
    "\052\006\055\013\021\016\057\017\024\020\052\023\033" +
    "\024\030\025\044\026\016\027\042\030\043\031\034\032" +
    "\045\036\050\047\046\050\031\052\051\054\013\101\017" +
    "\116\014\001\002\000\004\012\322\001\002\000\062\002" +
    "\uffd5\006\uffd5\012\uffd5\013\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\022\323\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\036\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\054\uffd5\101\uffd5\116\uffd5\001\002\000\004\104" +
    "\324\001\002\000\004\011\325\001\002\000\052\006\055" +
    "\013\021\016\057\017\024\020\052\023\033\024\030\025" +
    "\044\026\016\027\042\030\043\031\034\032\045\036\050" +
    "\047\046\050\031\052\051\054\013\101\017\116\014\001" +
    "\002\000\004\012\327\001\002\000\060\002\uffd3\006\uffd3" +
    "\012\uffd3\013\uffd3\016\uffd3\017\uffd3\020\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\036\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\101" +
    "\uffd3\116\uffd3\001\002\000\004\011\331\001\002\000\052" +
    "\006\055\013\021\016\057\017\024\020\052\023\033\024" +
    "\030\025\044\026\016\027\042\030\043\031\034\032\045" +
    "\036\050\047\046\050\031\052\051\054\013\101\017\116" +
    "\014\001\002\000\004\012\333\001\002\000\062\002\uffd4" +
    "\006\uffd4\012\uffd4\013\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\334\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\036\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\054\uffd4\101\uffd4\116\uffd4\001\002\000\004\104\335" +
    "\001\002\000\004\011\336\001\002\000\052\006\055\013" +
    "\021\016\057\017\024\020\052\023\033\024\030\025\044" +
    "\026\016\027\042\030\043\031\034\032\045\036\050\047" +
    "\046\050\031\052\051\054\013\101\017\116\014\001\002" +
    "\000\004\012\340\001\002\000\060\002\uffd2\006\uffd2\012" +
    "\uffd2\013\uffd2\016\uffd2\017\uffd2\020\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\036" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\101\uffd2" +
    "\116\uffd2\001\002\000\006\114\342\115\343\001\002\000" +
    "\004\102\346\001\002\000\004\102\344\001\002\000\004" +
    "\010\345\001\002\000\060\002\uff85\006\uff85\012\uff85\013" +
    "\uff85\016\uff85\017\uff85\020\uff85\023\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\036\uff85\047" +
    "\uff85\050\uff85\051\uff85\052\uff85\054\uff85\101\uff85\116\uff85" +
    "\001\002\000\004\010\347\001\002\000\060\002\uff86\006" +
    "\uff86\012\uff86\013\uff86\016\uff86\017\uff86\020\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032" +
    "\uff86\036\uff86\047\uff86\050\uff86\051\uff86\052\uff86\054\uff86" +
    "\101\uff86\116\uff86\001\002\000\014\005\355\006\352\114" +
    "\351\115\354\116\353\001\002\000\004\102\364\001\002" +
    "\000\004\102\362\001\002\000\004\102\361\001\002\000" +
    "\004\102\360\001\002\000\004\102\356\001\002\000\004" +
    "\010\357\001\002\000\060\002\uffc4\006\uffc4\012\uffc4\013" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\036\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\101\uffc4\116\uffc4" +
    "\001\002\000\060\002\uff91\006\uff91\012\uff91\013\uff91\016" +
    "\uff91\017\uff91\020\uff91\023\uff91\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\036\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\054\uff91\101\uff91\116\uff91\001\002" +
    "\000\060\002\uff95\006\uff95\012\uff95\013\uff95\016\uff95\017" +
    "\uff95\020\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\036\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\054\uff95\101\uff95\116\uff95\001\002\000\062" +
    "\002\uff97\006\uff97\010\363\012\uff97\013\uff97\016\uff97\017" +
    "\uff97\020\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\036\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\054\uff97\101\uff97\116\uff97\001\002\000\060" +
    "\002\uffc5\006\uffc5\012\uffc5\013\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\036\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\054\uffc5\101\uffc5\116\uffc5\001\002\000\060\002\uff93" +
    "\006\uff93\012\uff93\013\uff93\016\uff93\017\uff93\020\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\036\uff93\047\uff93\050\uff93\051\uff93\052\uff93\054" +
    "\uff93\101\uff93\116\uff93\001\002\000\004\002\000\001\002" +
    "\000\014\005\144\006\140\114\137\115\142\116\141\001" +
    "\002\000\004\102\370\001\002\000\004\011\371\001\002" +
    "\000\054\006\055\012\372\013\021\016\057\017\024\020" +
    "\052\023\033\024\030\025\044\026\016\027\042\030\043" +
    "\031\034\032\045\036\050\047\046\050\031\052\051\054" +
    "\013\101\017\116\014\001\002\000\060\002\uffc2\006\uffc2" +
    "\012\uffc2\013\uffc2\016\uffc2\017\uffc2\020\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\036\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\101" +
    "\uffc2\116\uffc2\001\002\000\004\012\374\001\002\000\060" +
    "\002\uffc3\006\uffc3\012\uffc3\013\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\036\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\054\uffc3\101\uffc3\116\uffc3\001\002\000\012\006\376" +
    "\114\377\115\u0101\116\u0100\001\002\000\004\102\u0108\001" +
    "\002\000\004\102\u0106\001\002\000\004\102\u0104\001\002" +
    "\000\004\102\u0102\001\002\000\004\010\u0103\001\002\000" +
    "\060\002\uffa2\006\uffa2\012\uffa2\013\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\036\uffa2\047\uffa2\050\uffa2\051\uffa2" +
    "\052\uffa2\054\uffa2\101\uffa2\116\uffa2\001\002\000\004\010" +
    "\u0105\001\002\000\060\002\uffa3\006\uffa3\012\uffa3\013\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\036\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\054\uffa3\101\uffa3\116\uffa3\001" +
    "\002\000\062\002\uffa0\006\uffa0\010\u0107\012\uffa0\013\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\023\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\036\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\054\uffa0\101\uffa0\116\uffa0\001" +
    "\002\000\060\002\uffa1\006\uffa1\012\uffa1\013\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\036\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\054\uffa1\101\uffa1\116\uffa1\001\002\000" +
    "\004\010\u0109\001\002\000\060\002\uffa4\006\uffa4\012\uffa4" +
    "\013\uffa4\016\uffa4\017\uffa4\020\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\036\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\101\uffa4\116" +
    "\uffa4\001\002\000\010\002\ufffb\012\ufffb\051\ufffb\001\002" +
    "\000\004\077\u010c\001\002\000\012\026\u0111\027\u010e\030" +
    "\u010f\102\u010d\001\002\000\004\011\u0118\001\002\000\004" +
    "\005\uffac\001\002\000\004\005\uffaa\001\002\000\004\005" +
    "\u0112\001\002\000\004\005\uffab\001\002\000\004\102\u0113" +
    "\001\002\000\004\011\u0114\001\002\000\054\006\055\012" +
    "\u0115\013\021\016\057\017\024\020\052\023\033\024\030" +
    "\025\044\026\016\027\042\030\043\031\034\032\045\036" +
    "\050\047\046\050\031\052\051\054\013\101\017\116\014" +
    "\001\002\000\060\002\uffbc\006\uffbc\012\uffbc\013\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\036\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\054\uffbc\101\uffbc\116\uffbc\001\002" +
    "\000\004\012\u0117\001\002\000\060\002\uffbd\006\uffbd\012" +
    "\uffbd\013\uffbd\016\uffbd\017\uffbd\020\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\036" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\101\uffbd" +
    "\116\uffbd\001\002\000\054\006\055\012\u0119\013\021\016" +
    "\057\017\024\020\052\023\033\024\030\025\044\026\016" +
    "\027\042\030\043\031\034\032\045\036\050\047\046\050" +
    "\031\052\051\054\013\101\017\116\014\001\002\000\060" +
    "\002\uffbe\006\uffbe\012\uffbe\013\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\036\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\054\uffbe\101\uffbe\116\uffbe\001\002\000\004\012\u011b" +
    "\001\002\000\060\002\uffbf\006\uffbf\012\uffbf\013\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\036\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\054\uffbf\101\uffbf\116\uffbf\001\002" +
    "\000\006\010\u011d\104\u011e\001\002\000\060\002\uffe7\006" +
    "\uffe7\012\uffe7\013\uffe7\016\uffe7\017\uffe7\020\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\036\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7" +
    "\101\uffe7\116\uffe7\001\002\000\012\006\u0120\114\u011f\115" +
    "\u0121\116\u0122\001\002\000\004\010\u0126\001\002\000\004" +
    "\010\u0125\001\002\000\004\010\u0124\001\002\000\004\010" +
    "\u0123\001\002\000\060\002\uffe4\006\uffe4\012\uffe4\013\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\036\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\054\uffe4\101\uffe4\116\uffe4\001" +
    "\002\000\060\002\uffde\006\uffde\012\uffde\013\uffde\016\uffde" +
    "\017\uffde\020\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\036\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\054\uffde\101\uffde\116\uffde\001\002\000" +
    "\060\002\uffe2\006\uffe2\012\uffe2\013\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\036\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\054\uffe2\101\uffe2\116\uffe2\001\002\000\060\002" +
    "\uffe0\006\uffe0\012\uffe0\013\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\036\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\054\uffe0\101\uffe0\116\uffe0\001\002\000\006\006\u012b\116" +
    "\u012c\001\002\000\006\006\u0129\116\u012a\001\002\000\060" +
    "\002\uff72\006\uff72\012\uff72\013\uff72\016\uff72\017\uff72\020" +
    "\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72" +
    "\031\uff72\032\uff72\036\uff72\047\uff72\050\uff72\051\uff72\052" +
    "\uff72\054\uff72\101\uff72\116\uff72\001\002\000\060\002\uff74" +
    "\006\uff74\012\uff74\013\uff74\016\uff74\017\uff74\020\uff74\023" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\036\uff74\047\uff74\050\uff74\051\uff74\052\uff74\054" +
    "\uff74\101\uff74\116\uff74\001\002\000\060\002\uff76\006\uff76" +
    "\012\uff76\013\uff76\016\uff76\017\uff76\020\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\036\uff76\047\uff76\050\uff76\051\uff76\052\uff76\054\uff76\101" +
    "\uff76\116\uff76\001\002\000\060\002\uff78\006\uff78\012\uff78" +
    "\013\uff78\016\uff78\017\uff78\020\uff78\023\uff78\024\uff78\025" +
    "\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\036\uff78" +
    "\047\uff78\050\uff78\051\uff78\052\uff78\054\uff78\101\uff78\116" +
    "\uff78\001\002\000\004\005\u012e\001\002\000\004\102\u012f" +
    "\001\002\000\004\011\u0130\001\002\000\004\053\u0132\001" +
    "\002\000\010\012\uffd1\053\u0132\065\uffd1\001\002\000\012" +
    "\006\u013f\114\u013e\115\u0140\116\u0141\001\002\000\006\012" +
    "\u0135\065\u0136\001\002\000\004\012\u013d\001\002\000\060" +
    "\002\uffd8\006\uffd8\012\uffd8\013\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\036\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\054\uffd8\101\uffd8\116\uffd8\001\002\000\004\104\u0137" +
    "\001\002\000\054\006\055\013\021\016\057\017\024\020" +
    "\052\023\033\024\030\025\044\026\016\027\042\030\043" +
    "\031\034\032\045\036\050\047\046\050\031\051\u0139\052" +
    "\051\054\013\101\017\116\014\001\002\000\004\051\u013b" +
    "\001\002\000\004\010\u013a\001\002\000\004\012\uffc6\001" +
    "\002\000\004\010\u013c\001\002\000\004\012\uffc7\001\002" +
    "\000\060\002\uffd7\006\uffd7\012\uffd7\013\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\036\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\054\uffd7\101\uffd7\116\uffd7\001\002\000\004" +
    "\104\u0154\001\002\000\004\104\u014e\001\002\000\004\104" +
    "\u0148\001\002\000\004\104\u0142\001\002\000\054\006\055" +
    "\013\021\016\057\017\024\020\052\023\033\024\030\025" +
    "\044\026\016\027\042\030\043\031\034\032\045\036\050" +
    "\047\046\050\031\051\u0144\052\051\054\013\101\017\116" +
    "\014\001\002\000\004\051\u0146\001\002\000\004\010\u0145" +
    "\001\002\000\010\012\uffc8\053\uffc8\065\uffc8\001\002\000" +
    "\004\010\u0147\001\002\000\010\012\uffc9\053\uffc9\065\uffc9" +
    "\001\002\000\054\006\055\013\021\016\057\017\024\020" +
    "\052\023\033\024\030\025\044\026\016\027\042\030\043" +
    "\031\034\032\045\036\050\047\046\050\031\051\u014a\052" +
    "\051\054\013\101\017\116\014\001\002\000\004\051\u014c" +
    "\001\002\000\004\010\u014b\001\002\000\010\012\uffca\053" +
    "\uffca\065\uffca\001\002\000\004\010\u014d\001\002\000\010" +
    "\012\uffcb\053\uffcb\065\uffcb\001\002\000\054\006\055\013" +
    "\021\016\057\017\024\020\052\023\033\024\030\025\044" +
    "\026\016\027\042\030\043\031\034\032\045\036\050\047" +
    "\046\050\031\051\u0150\052\051\054\013\101\017\116\014" +
    "\001\002\000\004\051\u0152\001\002\000\004\010\u0151\001" +
    "\002\000\010\012\uffce\053\uffce\065\uffce\001\002\000\004" +
    "\010\u0153\001\002\000\010\012\uffcf\053\uffcf\065\uffcf\001" +
    "\002\000\054\006\055\013\021\016\057\017\024\020\052" +
    "\023\033\024\030\025\044\026\016\027\042\030\043\031" +
    "\034\032\045\036\050\047\046\050\031\051\u0156\052\051" +
    "\054\013\101\017\116\014\001\002\000\004\051\u0158\001" +
    "\002\000\004\010\u0157\001\002\000\010\012\uffcc\053\uffcc" +
    "\065\uffcc\001\002\000\004\010\u0159\001\002\000\010\012" +
    "\uffcd\053\uffcd\065\uffcd\001\002\000\006\012\uffd0\065\uffd0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\025\004\017" +
    "\005\022\011\007\015\031\016\034\017\052\020\036\021" +
    "\035\023\026\026\014\027\010\030\046\031\011\032\057" +
    "\033\060\034\021\035\053\036\037\037\040\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\u0127\043\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\u0109\004\017\005\022\011\007\015\031\016\034\017" +
    "\052\020\036\021\035\023\026\026\014\027\010\030\046" +
    "\031\011\032\057\033\060\034\021\035\053\036\037\037" +
    "\040\041\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\121\043\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\132\004\017\005" +
    "\022\011\007\015\031\016\034\017\052\020\036\021\035" +
    "\023\026\026\014\027\010\030\046\031\011\032\057\033" +
    "\060\034\021\035\053\036\037\037\040\041\055\001\001" +
    "\000\002\001\001\000\004\020\134\001\001\000\002\001" +
    "\001\000\004\013\142\001\001\000\004\014\172\001\001" +
    "\000\004\014\170\001\001\000\004\014\166\001\001\000" +
    "\004\014\164\001\001\000\002\001\001\000\004\014\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\003\162\004\017\005\022\011\007\015" +
    "\031\016\034\017\052\020\036\021\035\023\026\026\014" +
    "\027\010\030\046\031\011\032\057\033\060\034\021\035" +
    "\053\036\037\037\040\041\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\177\025\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\277\001\001\000\002\001\001\000\004\025\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\311\001\001\000\002\001\001" +
    "\000\004\012\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\320" +
    "\004\017\005\022\011\007\015\031\016\034\017\052\020" +
    "\036\021\035\023\026\026\014\027\010\030\046\031\011" +
    "\032\057\033\060\034\021\035\053\036\037\037\040\041" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\325\004\017\005" +
    "\022\011\007\015\031\016\034\017\052\020\036\021\035" +
    "\023\026\026\014\027\010\030\046\031\011\032\057\033" +
    "\060\034\021\035\053\036\037\037\040\041\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\331\004\017\005\022\011\007\015\031\016\034" +
    "\017\052\020\036\021\035\023\026\026\014\027\010\030" +
    "\046\031\011\032\057\033\060\034\021\035\053\036\037" +
    "\037\040\041\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\336" +
    "\004\017\005\022\011\007\015\031\016\034\017\052\020" +
    "\036\021\035\023\026\026\014\027\010\030\046\031\011" +
    "\032\057\033\060\034\021\035\053\036\037\037\040\041" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\372\004\017\005\022" +
    "\011\007\015\031\016\034\017\052\020\036\021\035\023" +
    "\026\026\014\027\010\030\046\031\011\032\057\033\060" +
    "\034\021\035\053\036\037\037\040\041\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\u0115\004\017\005\022\011\007\015\031" +
    "\016\034\017\052\020\036\021\035\023\026\026\014\027" +
    "\010\030\046\031\011\032\057\033\060\034\021\035\053" +
    "\036\037\037\040\041\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\u0119\004\017" +
    "\005\022\011\007\015\031\016\034\017\052\020\036\021" +
    "\035\023\026\026\014\027\010\030\046\031\011\032\057" +
    "\033\060\034\021\035\053\036\037\037\040\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0132\007\u0130\001\001\000\006\006" +
    "\u0159\007\u0130\001\001\000\002\001\001\000\004\010\u0133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\u0137\004\017\005\022\011\007\015\031" +
    "\016\034\017\052\020\036\021\035\023\026\026\014\027" +
    "\010\030\046\031\011\032\057\033\060\034\021\035\053" +
    "\036\037\037\040\041\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\u0142" +
    "\004\017\005\022\011\007\015\031\016\034\017\052\020" +
    "\036\021\035\023\026\026\014\027\010\030\046\031\011" +
    "\032\057\033\060\034\021\035\053\036\037\037\040\041" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\u0148\004\017\005\022\011\007\015\031\016\034\017\052" +
    "\020\036\021\035\023\026\026\014\027\010\030\046\031" +
    "\011\032\057\033\060\034\021\035\053\036\037\037\040" +
    "\041\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\u014e\004\017\005\022\011\007\015\031\016\034\017" +
    "\052\020\036\021\035\023\026\026\014\027\010\030\046" +
    "\031\011\032\057\033\060\034\021\035\053\036\037\037" +
    "\040\041\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\u0154\004\017\005\022\011\007\015\031\016\034" +
    "\017\052\020\036\021\035\023\026\026\014\027\010\030" +
    "\046\031\011\032\057\033\060\034\021\035\053\036\037" +
    "\037\040\041\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    FrmPrincipal v=new FrmPrincipal();    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Operaciones ::= NumeroEnt OperadoresLo Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Operaciones ::= Numero OperadoresLo NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Operaciones ::= NumeroEnt OperadoresLo NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Operaciones ::= Numero OperadoresLo Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Operaciones ::= NumeroEnt OperadoresA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Operaciones ::= Numero OperadoresA NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Operaciones ::= NumeroEnt OperadoresA NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Operaciones ::= Numero OperadoresA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OperadoresLo ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OperadoresLo ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OperadoresLo ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OperadoresA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OperadoresA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OperadoresA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OperadoresA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // posicion ::= TRASERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("posicion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // posicion ::= DELANTERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("posicion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // direccion ::= IZQUIERDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("direccion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // direccion ::= DERECHA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("direccion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUNCIONBOCINA ::= BOCINA CORCHI CERO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONBOCINA",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FUNCIONBOCINA ::= BOCINA CORCHI UNO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONBOCINA",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CARDINAL ::= NOROESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CARDINAL ::= OESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CARDINAL ::= SUROESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CARDINAL ::= SUR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CARDINAL ::= SURESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CARDINAL ::= ESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CARDINAL ::= NORESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CARDINAL ::= NORTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONTROLCABINA ::= GIRAR CABINA CORCHI CARDINAL CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROLCABINA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MOVCARRO ::= RETROCEDER CORCHI CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MOVCARRO ::= AVANZAR CORCHI CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MOVCARRO ::= RETROCEDER CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MOVCARRO ::= AVANZAR CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MOVCARRO ::= RETROCEDER CORCHI NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MOVCARRO ::= AVANZAR CORCHI NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MOVCARRO ::= RETROCEDER CORCHI Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MOVCARRO ::= AVANZAR CORCHI Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MANEJOGANCHO ::= GANCHO CERRAR FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + "f gjn");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MANEJOGANCHO ::= GANCHO ABRIR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MANEJOGANCHO ::= GANCHO SUBIR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MANEJOGANCHO ::= GANCHO BAJAR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DETENERMOVRUEDAS ::= PARAR CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DETENERMOVRUEDAS ::= PARAR CORCHI UNO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DETENERMOVRUEDAS ::= PARAR CORCHI CERO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DETENERMOVRUEDAS ::= PARAR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DETENERMOVRUEDAS ::= PARAR CORCHI Numero CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // USARSENSOR ::= SENSOR CORCHI posicion CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("USARSENSOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OBTENERLUZ ::= ESTADO PARENTESISI LUZ CORCHI posicion COMILLA direccion CORCHD PARENTESISD 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + "Debes poner primero la direccion y luego la posicion");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBTENERLUZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OBTENERLUZ ::= ESTADO PARENTESISI LUZ CORCHI direccion COMILLA posicion CORCHD PARENTESISD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBTENERLUZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // APAGAR ::= LUZ CORCHI direccion COMILLA posicion CORCHD Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("APAGAR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ENCENDER ::= LUZ CORCHI direccion COMILLA posicion CORCHD Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCENDER",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPOS ::= ANALOGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPOS ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPOS ::= DIGITAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RELACIONALES ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RELACIONALES ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RELACIONALES ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RELACIONALES ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RELACIONALES ::= DIFERENTEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RELACIONALES ::= IGUALQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CondicionA ::= Identificador RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CondicionA ::= CERO RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CondicionA ::= UNO RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CondicionA ::= NumeroEnt RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CondicionA ::= Numero RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CondicionA ::= Identificador RELACIONALES CERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CondicionA ::= Identificador RELACIONALES UNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CondicionA ::= Identificador RELACIONALES NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CondicionA ::= Identificador RELACIONALES Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCIONE ::= FUNCION Identificador CORCHI TIPOS Identificador CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCIONE ::= FUNCION Identificador CORCHI TIPOS Identificador CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCIONE ::= FUNCION Identificador CORCHI CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCIONE ::= FUNCION Identificador CORCHI CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // REPETIRE ::= REPETIR CORCHI CondicionA CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIRE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BANDERAE ::= BANDERA INICIO INSTRUCCIONES FIN CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BANDERAE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CICLOS ::= CICLO CORCHI CondicionA CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CICLOS ::= CICLO CORCHI CondicionA CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AVANZARE ::= AVANZAR CORCHI Identificador CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AVANZARE ::= AVANZAR CORCHI Numero CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NINGUNON ::= NINGUNO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NINGUNON",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NINGUNON ::= NINGUNO Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NINGUNON",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPCIONN ::= OPCION NumeroEnt Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPCIONN ::= OPCION NumeroEnt Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPCIONN ::= OPCION CERO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPCIONN ::= OPCION CERO Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPCIONN ::= OPCION UNO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPCIONN ::= OPCION UNO Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPCIONN ::= OPCION Numero Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPCIONN ::= OPCION Numero Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPCIONES ::= OPCIONN OPCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPCIONES ::= OPCIONN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONN ::= FALSO Asignacion INICIO INSTRUCCIONES FIN VERDADERO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONN ::= VERDADERO Asignacion INICIO INSTRUCCIONES FIN FALSO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONN ::= FALSO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIONN ::= VERDADERO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICIONES ::= CONDICION CORCHI CondicionA CORCHD CONDICIONN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EVALUARE ::= EVALUAR CORCHI Identificador CORCHD INICIO OPCIONES NINGUNON FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUARE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EVALUARE ::= EVALUAR CORCHI Identificador CORCHD INICIO OPCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUARE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARARTIPO ::= DIGITAL Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Estas intentando agregar un valor diferente a 1 y 0");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARARTIPO ::= DIGITAL Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Estas intentando agregar un valor diferente a 1 y 0");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARARTIPO ::= DIGITAL Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARARTIPO ::= DIGITAL Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARARTIPO ::= ANALOGO Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARARTIPO ::= ENTERO Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARARTIPO ::= ANALOGO Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARARTIPO ::= ENTERO Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARARTIPO ::= ANALOGO Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Deberias intentar con un numero con decimales");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARARTIPO ::= ENTERO Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Deberias intentar con un numero sin decimales");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARARTIPO ::= ANALOGO Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARARTIPO ::= ENTERO Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARARTIPO ::= DIGITAL Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARARTIPO ::= ANALOGO Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARARTIPO ::= ENTERO Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARARTIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= Operaciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= FUNCIONBOCINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= CONTROLCABINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= MOVCARRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= MANEJOGANCHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= GIRARCARRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DETENERMOVRUEDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= USARSENSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= OBTENERLUZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= APAGAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= ENCENDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= FUNCIONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= REPETIRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= BANDERAE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= DECLARARTIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CONDICIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= AVANZARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= EVALUARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // START ::= PRINCIPAL INICIO INSTRUCCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No agregaste el FIN");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= PRINCIPAL INICIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No agregaste el FIN");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= PRINCIPAL INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= PRINCIPAL INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

