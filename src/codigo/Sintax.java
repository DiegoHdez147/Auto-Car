
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 21 02:22:18 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 21 02:22:18 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\004\000\002\002\005\000\002\003\003" +
    "\000\002\003\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\044\007\000\002\044\007\000\002\044\007" +
    "\000\002\044\007\000\002\044\007\000\002\044\007\000" +
    "\002\044\007\000\002\044\007\000\002\044\007\000\002" +
    "\044\007\000\002\044\006\000\002\044\006\000\002\044" +
    "\006\000\002\044\006\000\002\044\006\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\044\006\000\002\044\006\000\002\044\006\000\002" +
    "\044\007\000\002\044\006\000\002\044\007\000\002\044" +
    "\005\000\002\005\011\000\002\005\012\000\002\011\007" +
    "\000\002\012\007\000\002\012\007\000\002\012\014\000" +
    "\002\012\014\000\002\006\003\000\002\006\004\000\002" +
    "\007\010\000\002\007\007\000\002\007\010\000\002\007" +
    "\007\000\002\007\010\000\002\007\007\000\002\007\010" +
    "\000\002\007\007\000\002\010\007\000\002\010\006\000" +
    "\002\015\007\000\002\015\007\000\002\020\011\000\002" +
    "\020\010\000\002\017\007\000\002\021\011\000\002\023" +
    "\011\000\002\023\010\000\002\023\013\000\002\023\012" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\026\013\000\002\027\013" +
    "\000\002\030\013\000\002\030\013\000\002\031\006\000" +
    "\002\032\007\000\002\032\007\000\002\032\007\000\002" +
    "\032\007\000\002\032\006\000\002\033\011\000\002\033" +
    "\011\000\002\033\011\000\002\033\011\000\002\034\010" +
    "\000\002\034\010\000\002\034\010\000\002\034\005\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\035\006\000\002\035" +
    "\006\000\002\035\006\000\002\036\010\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\037\007\000\002\037\007\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\004\004\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\052\002\ufffe\012\024\013\020\016\055\017\023\020" +
    "\052\023\033\024\027\025\044\026\015\027\040\030\042" +
    "\031\034\032\045\036\050\047\046\050\030\052\051\054" +
    "\013\101\016\001\002\000\054\002\ufff8\012\ufff8\013\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\036\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\054\ufff8\101\ufff8\001\002\000" +
    "\054\002\ufff2\012\ufff2\013\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\036\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\054\ufff2\101\ufff2\001\002\000\054\002\ufff0\012\ufff0\013" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\036\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0\101\ufff0\001\002" +
    "\000\004\077\u011b\001\002\000\054\002\ufff3\012\ufff3\013" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\036\ufff3\047" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\054\ufff3\101\ufff3\001\002" +
    "\000\004\005\u010f\001\002\000\004\005\376\001\002\000" +
    "\054\002\ufffc\012\ufffc\013\020\016\055\017\023\020\052" +
    "\023\033\024\027\025\044\026\015\027\040\030\042\031" +
    "\034\032\045\036\050\047\046\050\030\051\ufffc\052\051" +
    "\054\013\101\016\001\002\000\004\077\360\001\002\000" +
    "\054\002\uffed\012\uffed\013\uffed\016\uffed\017\uffed\020\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\036\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\054\uffed\101\uffed\001\002\000\054\002\ufffa\012\ufffa\013" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\036\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa\101\ufffa\001\002" +
    "\000\004\077\351\001\002\000\004\002\uffff\001\002\000" +
    "\006\002\ufffd\012\350\001\002\000\054\002\ufff4\012\ufff4" +
    "\013\ufff4\016\ufff4\017\ufff4\020\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\036\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4\101\ufff4\001" +
    "\002\000\004\077\333\001\002\000\004\077\324\001\002" +
    "\000\054\002\uffe9\012\uffe9\013\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\036\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\054\uffe9\101\uffe9\001\002\000\054\002\ufff9\012\ufff9" +
    "\013\ufff9\016\ufff9\017\ufff9\020\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\036\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\054\ufff9\101\ufff9\001" +
    "\002\000\004\077\274\001\002\000\004\077\262\001\002" +
    "\000\054\002\ufff5\012\ufff5\013\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\036\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\054\ufff5\101\ufff5\001\002\000\054\002\ufff6\012\ufff6" +
    "\013\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\036\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\054\ufff6\101\ufff6\001" +
    "\002\000\054\002\uffeb\012\uffeb\013\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\036\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\054\uffeb\101\uffeb\001\002\000\004\005\246\001" +
    "\002\000\054\002\uffea\012\uffea\013\uffea\016\uffea\017\uffea" +
    "\020\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\036\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\054\uffea\101\uffea\001\002\000\004\005\232\001" +
    "\002\000\054\002\uffe8\012\uffe8\013\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\036\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\054\uffe8\101\uffe8\001\002\000\004\077\221\001" +
    "\002\000\004\077\216\001\002\000\012\043\176\044\200" +
    "\045\177\046\175\001\002\000\054\002\ufff1\012\ufff1\013" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\036\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\101\ufff1\001\002" +
    "\000\004\100\156\001\002\000\004\077\117\001\002\000" +
    "\004\011\113\001\002\000\054\002\ufff7\012\ufff7\013\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\036\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\054\ufff7\101\ufff7\001\002\000" +
    "\054\002\uffec\012\uffec\013\uffec\016\uffec\017\uffec\020\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\036\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\054\uffec\101\uffec\001\002\000\006\041\060\042\061\001" +
    "\002\000\054\002\uffef\012\uffef\013\uffef\016\uffef\017\uffef" +
    "\020\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\036\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\054\uffef\101\uffef\001\002\000\054\002\uffee\012" +
    "\uffee\013\uffee\016\uffee\017\uffee\020\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\036" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\054\uffee\101\uffee" +
    "\001\002\000\004\077\077\001\002\000\004\077\062\001" +
    "\002\000\006\014\064\015\063\001\002\000\006\102\uff70" +
    "\117\uff70\001\002\000\006\102\uff6f\117\uff6f\001\002\000" +
    "\004\117\066\001\002\000\012\006\067\114\070\115\071" +
    "\116\072\001\002\000\004\102\076\001\002\000\004\102" +
    "\075\001\002\000\004\102\074\001\002\000\004\102\073" +
    "\001\002\000\054\002\uff8a\012\uff8a\013\uff8a\016\uff8a\017" +
    "\uff8a\020\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\036\uff8a\047\uff8a\050\uff8a\051" +
    "\uff8a\052\uff8a\054\uff8a\101\uff8a\001\002\000\054\002\uff89" +
    "\012\uff89\013\uff89\016\uff89\017\uff89\020\uff89\023\uff89\024" +
    "\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89" +
    "\036\uff89\047\uff89\050\uff89\051\uff89\052\uff89\054\uff89\101" +
    "\uff89\001\002\000\054\002\uff88\012\uff88\013\uff88\016\uff88" +
    "\017\uff88\020\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\036\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\054\uff88\101\uff88\001\002\000\054\002" +
    "\uff8b\012\uff8b\013\uff8b\016\uff8b\017\uff8b\020\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032" +
    "\uff8b\036\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\054\uff8b" +
    "\101\uff8b\001\002\000\022\055\101\056\107\057\106\060" +
    "\110\061\103\062\100\063\105\064\102\001\002\000\004" +
    "\102\uff73\001\002\000\004\102\uff7a\001\002\000\004\102" +
    "\uff75\001\002\000\004\102\uff79\001\002\000\004\102\111" +
    "\001\002\000\004\102\uff77\001\002\000\004\102\uff78\001" +
    "\002\000\004\102\uff76\001\002\000\004\102\uff74\001\002" +
    "\000\004\010\112\001\002\000\054\002\uff7b\012\uff7b\013" +
    "\uff7b\016\uff7b\017\uff7b\020\uff7b\023\uff7b\024\uff7b\025\uff7b" +
    "\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\036\uff7b\047" +
    "\uff7b\050\uff7b\051\uff7b\052\uff7b\054\uff7b\101\uff7b\001\002" +
    "\000\046\013\020\016\055\017\023\020\052\023\033\024" +
    "\027\025\044\026\015\027\040\030\042\031\034\032\045" +
    "\036\050\047\046\050\030\052\051\054\013\101\016\001" +
    "\002\000\004\012\115\001\002\000\004\017\023\001\002" +
    "\000\054\002\uffb3\012\uffb3\013\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\036\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\054\uffb3\101\uffb3\001\002\000\014\005\125\006\121" +
    "\114\120\115\123\116\122\001\002\000\016\066\130\067" +
    "\134\070\126\071\127\072\131\073\132\001\002\000\016" +
    "\066\130\067\134\070\126\071\127\072\131\073\132\001" +
    "\002\000\016\066\130\067\134\070\126\071\127\072\131" +
    "\073\132\001\002\000\016\066\130\067\134\070\126\071" +
    "\127\072\131\073\132\001\002\000\004\102\142\001\002" +
    "\000\016\066\130\067\134\070\126\071\127\072\131\073" +
    "\132\001\002\000\014\005\uff9c\006\uff9c\114\uff9c\115\uff9c" +
    "\116\uff9c\001\002\000\014\005\uff9b\006\uff9b\114\uff9b\115" +
    "\uff9b\116\uff9b\001\002\000\014\005\uff9e\006\uff9e\114\uff9e" +
    "\115\uff9e\116\uff9e\001\002\000\014\005\uff9a\006\uff9a\114" +
    "\uff9a\115\uff9a\116\uff9a\001\002\000\014\005\uff99\006\uff99" +
    "\114\uff99\115\uff99\116\uff99\001\002\000\014\005\141\006" +
    "\136\114\135\115\137\116\140\001\002\000\014\005\uff9d" +
    "\006\uff9d\114\uff9d\115\uff9d\116\uff9d\001\002\000\004\102" +
    "\uffa5\001\002\000\004\102\uffa7\001\002\000\004\102\uffa4" +
    "\001\002\000\004\102\uffa6\001\002\000\004\102\uff9f\001" +
    "\002\000\004\011\143\001\002\000\046\013\020\016\055" +
    "\017\023\020\052\023\033\024\027\025\044\026\015\027" +
    "\040\030\042\031\034\032\045\036\050\047\046\050\030" +
    "\052\051\054\013\101\016\001\002\000\004\012\145\001" +
    "\002\000\054\002\uffb2\012\uffb2\013\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\036\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\054\uffb2\101\uffb2\001\002\000\004\005\147\001" +
    "\002\000\004\102\uffa0\001\002\000\004\005\151\001\002" +
    "\000\004\102\uffa2\001\002\000\004\005\153\001\002\000" +
    "\004\102\uffa3\001\002\000\004\005\155\001\002\000\004" +
    "\102\uffa1\001\002\000\004\031\157\001\002\000\004\077" +
    "\160\001\002\000\012\014\064\015\063\037\162\040\164" +
    "\001\002\000\004\117\171\001\002\000\006\102\uff6e\117" +
    "\uff6e\001\002\000\004\117\165\001\002\000\006\102\uff6d" +
    "\117\uff6d\001\002\000\006\014\064\015\063\001\002\000" +
    "\004\102\167\001\002\000\004\103\170\001\002\000\054" +
    "\002\uff92\012\uff92\013\uff92\016\uff92\017\uff92\020\uff92\023" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\036\uff92\047\uff92\050\uff92\051\uff92\052\uff92\054" +
    "\uff92\101\uff92\001\002\000\006\037\162\040\164\001\002" +
    "\000\004\102\173\001\002\000\004\103\174\001\002\000" +
    "\054\002\uff93\012\uff93\013\uff93\016\uff93\017\uff93\020\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\036\uff93\047\uff93\050\uff93\051\uff93\052\uff93" +
    "\054\uff93\101\uff93\001\002\000\004\077\212\001\002\000" +
    "\004\077\206\001\002\000\004\010\205\001\002\000\004" +
    "\077\201\001\002\000\004\116\202\001\002\000\004\102" +
    "\203\001\002\000\004\010\204\001\002\000\054\002\uff86" +
    "\012\uff86\013\uff86\016\uff86\017\uff86\020\uff86\023\uff86\024" +
    "\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\036\uff86\047\uff86\050\uff86\051\uff86\052\uff86\054\uff86\101" +
    "\uff86\001\002\000\054\002\uff84\012\uff84\013\uff84\016\uff84" +
    "\017\uff84\020\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027" +
    "\uff84\030\uff84\031\uff84\032\uff84\036\uff84\047\uff84\050\uff84" +
    "\051\uff84\052\uff84\054\uff84\101\uff84\001\002\000\004\116" +
    "\207\001\002\000\004\102\210\001\002\000\004\010\211" +
    "\001\002\000\054\002\uff87\012\uff87\013\uff87\016\uff87\017" +
    "\uff87\020\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87" +
    "\030\uff87\031\uff87\032\uff87\036\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\054\uff87\101\uff87\001\002\000\004\116\213" +
    "\001\002\000\004\102\214\001\002\000\004\010\215\001" +
    "\002\000\054\002\uff85\012\uff85\013\uff85\016\uff85\017\uff85" +
    "\020\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030" +
    "\uff85\031\uff85\032\uff85\036\uff85\047\uff85\050\uff85\051\uff85" +
    "\052\uff85\054\uff85\101\uff85\001\002\000\006\037\162\040" +
    "\164\001\002\000\004\102\220\001\002\000\054\002\uff91" +
    "\012\uff91\013\uff91\016\uff91\017\uff91\020\uff91\023\uff91\024" +
    "\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91" +
    "\036\uff91\047\uff91\050\uff91\051\uff91\052\uff91\054\uff91\101" +
    "\uff91\001\002\000\012\006\222\114\223\115\225\116\224" +
    "\001\002\000\004\102\231\001\002\000\004\102\230\001" +
    "\002\000\004\102\227\001\002\000\004\102\226\001\002" +
    "\000\054\002\uff7c\012\uff7c\013\uff7c\016\uff7c\017\uff7c\020" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c" +
    "\031\uff7c\032\uff7c\036\uff7c\047\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\054\uff7c\101\uff7c\001\002\000\054\002\uff80\012\uff80" +
    "\013\uff80\016\uff80\017\uff80\020\uff80\023\uff80\024\uff80\025" +
    "\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\036\uff80" +
    "\047\uff80\050\uff80\051\uff80\052\uff80\054\uff80\101\uff80\001" +
    "\002\000\054\002\uff7e\012\uff7e\013\uff7e\016\uff7e\017\uff7e" +
    "\020\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\031\uff7e\032\uff7e\036\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\052\uff7e\054\uff7e\101\uff7e\001\002\000\054\002\uff82\012" +
    "\uff82\013\uff82\016\uff82\017\uff82\020\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\036" +
    "\uff82\047\uff82\050\uff82\051\uff82\052\uff82\054\uff82\101\uff82" +
    "\001\002\000\006\010\233\104\234\001\002\000\054\002" +
    "\uffe5\012\uffe5\013\uffe5\016\uffe5\017\uffe5\020\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\036\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5" +
    "\101\uffe5\001\002\000\014\006\236\010\235\114\237\115" +
    "\240\116\241\001\002\000\054\002\uffd1\012\uffd1\013\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\036\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\054\uffd1\101\uffd1\001\002\000" +
    "\056\002\uffd9\010\245\012\uffd9\013\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\036\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\054\uffd9\101\uffd9\001\002\000\056\002\uffd6\010" +
    "\244\012\uffd6\013\uffd6\016\uffd6\017\uffd6\020\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\036\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\054\uffd6" +
    "\101\uffd6\001\002\000\056\002\uffd5\010\243\012\uffd5\013" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\036\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\054\uffd5\101\uffd5\001\002" +
    "\000\004\010\242\001\002\000\054\002\uffe1\012\uffe1\013" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\036\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\054\uffe1\101\uffe1\001\002" +
    "\000\054\002\uffdf\012\uffdf\013\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\036\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\054\uffdf\101\uffdf\001\002\000\054\002\uffdd\012\uffdd" +
    "\013\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\036\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\054\uffdd\101\uffdd\001" +
    "\002\000\054\002\uffe3\012\uffe3\013\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\036\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\054\uffe3\101\uffe3\001\002\000\006\010\247\104" +
    "\250\001\002\000\054\002\uffe6\012\uffe6\013\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\036\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\054\uffe6\101\uffe6\001\002\000\066\002" +
    "\uffcb\006\253\010\252\012\uffcb\013\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\036\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\054\uffcb\101\uffcb\114\251\115\255\116\254\001" +
    "\002\000\056\002\uffd3\010\261\012\uffd3\013\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\036\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\054\uffd3\101\uffd3\001\002\000\054\002" +
    "\uffd0\012\uffd0\013\uffd0\016\uffd0\017\uffd0\020\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\036\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\054\uffd0" +
    "\101\uffd0\001\002\000\056\002\uffcf\010\260\012\uffcf\013" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\036\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf\101\uffcf\001\002" +
    "\000\056\002\uffcd\010\257\012\uffcd\013\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\036\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\054\uffcd\101\uffcd\001\002\000\056\002\uffd4" +
    "\010\256\012\uffd4\013\uffd4\016\uffd4\017\uffd4\020\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\036\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\054" +
    "\uffd4\101\uffd4\001\002\000\054\002\uffdb\012\uffdb\013\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\036\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\054\uffdb\101\uffdb\001\002\000" +
    "\054\002\uffcc\012\uffcc\013\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\036\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\054\uffcc\101\uffcc\001\002\000\054\002\uffce\012\uffce\013" +
    "\uffce\016\uffce\017\uffce\020\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\036\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\054\uffce\101\uffce\001\002" +
    "\000\054\002\uffdc\012\uffdc\013\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\036\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\054\uffdc\101\uffdc\001\002\000\006\014\064\015\063" +
    "\001\002\000\004\117\264\001\002\000\006\037\162\040" +
    "\164\001\002\000\004\102\266\001\002\000\004\104\267" +
    "\001\002\000\006\114\270\115\271\001\002\000\004\010" +
    "\273\001\002\000\004\010\272\001\002\000\054\002\uff94" +
    "\012\uff94\013\uff94\016\uff94\017\uff94\020\uff94\023\uff94\024" +
    "\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\036\uff94\047\uff94\050\uff94\051\uff94\052\uff94\054\uff94\101" +
    "\uff94\001\002\000\054\002\uff95\012\uff95\013\uff95\016\uff95" +
    "\017\uff95\020\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\036\uff95\047\uff95\050\uff95" +
    "\051\uff95\052\uff95\054\uff95\101\uff95\001\002\000\014\005" +
    "\125\006\121\114\120\115\123\116\122\001\002\000\004" +
    "\102\276\001\002\000\006\021\301\022\300\001\002\000" +
    "\054\002\uffc8\012\uffc8\013\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\036\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\054\uffc8\101\uffc8\001\002\000\004\104\313\001\002\000" +
    "\004\104\302\001\002\000\004\011\303\001\002\000\046" +
    "\013\020\016\055\017\023\020\052\023\033\024\027\025" +
    "\044\026\015\027\040\030\042\031\034\032\045\036\050" +
    "\047\046\050\030\052\051\054\013\101\016\001\002\000" +
    "\004\012\305\001\002\000\056\002\uffc7\012\uffc7\013\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\022\306\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\036\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\101\uffc7\001" +
    "\002\000\004\104\307\001\002\000\004\011\310\001\002" +
    "\000\046\013\020\016\055\017\023\020\052\023\033\024" +
    "\027\025\044\026\015\027\040\030\042\031\034\032\045" +
    "\036\050\047\046\050\030\052\051\054\013\101\016\001" +
    "\002\000\004\012\312\001\002\000\054\002\uffc5\012\uffc5" +
    "\013\uffc5\016\uffc5\017\uffc5\020\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\036\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\101\uffc5\001" +
    "\002\000\004\011\314\001\002\000\046\013\020\016\055" +
    "\017\023\020\052\023\033\024\027\025\044\026\015\027" +
    "\040\030\042\031\034\032\045\036\050\047\046\050\030" +
    "\052\051\054\013\101\016\001\002\000\004\012\316\001" +
    "\002\000\056\002\uffc6\012\uffc6\013\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\317\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\036\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\054\uffc6\101\uffc6\001\002\000\004\104" +
    "\320\001\002\000\004\011\321\001\002\000\046\013\020" +
    "\016\055\017\023\020\052\023\033\024\027\025\044\026" +
    "\015\027\040\030\042\031\034\032\045\036\050\047\046" +
    "\050\030\052\051\054\013\101\016\001\002\000\004\012" +
    "\323\001\002\000\054\002\uffc4\012\uffc4\013\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\036\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\054\uffc4\101\uffc4\001\002\000\006\114" +
    "\325\115\326\001\002\000\004\102\331\001\002\000\004" +
    "\102\327\001\002\000\004\010\330\001\002\000\054\002" +
    "\uff71\012\uff71\013\uff71\016\uff71\017\uff71\020\uff71\023\uff71" +
    "\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032" +
    "\uff71\036\uff71\047\uff71\050\uff71\051\uff71\052\uff71\054\uff71" +
    "\101\uff71\001\002\000\004\010\332\001\002\000\054\002" +
    "\uff72\012\uff72\013\uff72\016\uff72\017\uff72\020\uff72\023\uff72" +
    "\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032" +
    "\uff72\036\uff72\047\uff72\050\uff72\051\uff72\052\uff72\054\uff72" +
    "\101\uff72\001\002\000\014\005\340\006\334\114\335\115" +
    "\336\116\337\001\002\000\004\102\346\001\002\000\004" +
    "\102\345\001\002\000\004\102\344\001\002\000\004\102" +
    "\343\001\002\000\004\102\341\001\002\000\004\010\342" +
    "\001\002\000\054\002\uffb6\012\uffb6\013\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\036\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\054\uffb6\101\uffb6\001\002\000\054\002\uff81" +
    "\012\uff81\013\uff81\016\uff81\017\uff81\020\uff81\023\uff81\024" +
    "\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\036\uff81\047\uff81\050\uff81\051\uff81\052\uff81\054\uff81\101" +
    "\uff81\001\002\000\054\002\uff7d\012\uff7d\013\uff7d\016\uff7d" +
    "\017\uff7d\020\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027" +
    "\uff7d\030\uff7d\031\uff7d\032\uff7d\036\uff7d\047\uff7d\050\uff7d" +
    "\051\uff7d\052\uff7d\054\uff7d\101\uff7d\001\002\000\054\002" +
    "\uff7f\012\uff7f\013\uff7f\016\uff7f\017\uff7f\020\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032" +
    "\uff7f\036\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\054\uff7f" +
    "\101\uff7f\001\002\000\056\002\uff83\010\347\012\uff83\013" +
    "\uff83\016\uff83\017\uff83\020\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\036\uff83\047" +
    "\uff83\050\uff83\051\uff83\052\uff83\054\uff83\101\uff83\001\002" +
    "\000\054\002\uffb7\012\uffb7\013\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\036\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\054\uffb7\101\uffb7\001\002\000\004\002\000\001\002" +
    "\000\014\005\125\006\121\114\120\115\123\116\122\001" +
    "\002\000\004\102\353\001\002\000\004\011\354\001\002" +
    "\000\050\012\355\013\020\016\055\017\023\020\052\023" +
    "\033\024\027\025\044\026\015\027\040\030\042\031\034" +
    "\032\045\036\050\047\046\050\030\052\051\054\013\101" +
    "\016\001\002\000\054\002\uffb4\012\uffb4\013\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\036\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\054\uffb4\101\uffb4\001\002\000\004\012" +
    "\357\001\002\000\054\002\uffb5\012\uffb5\013\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\036\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\054\uffb5\101\uffb5\001\002\000\012\006" +
    "\361\114\362\115\363\116\364\001\002\000\004\102\373" +
    "\001\002\000\004\102\371\001\002\000\004\102\367\001" +
    "\002\000\004\102\365\001\002\000\004\010\366\001\002" +
    "\000\054\002\uff8f\012\uff8f\013\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\036\uff8f\047\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\054\uff8f\101\uff8f\001\002\000\004\010\370\001\002" +
    "\000\054\002\uff8e\012\uff8e\013\uff8e\016\uff8e\017\uff8e\020" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\036\uff8e\047\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\054\uff8e\101\uff8e\001\002\000\056\002\uff8c\010\372" +
    "\012\uff8c\013\uff8c\016\uff8c\017\uff8c\020\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\036\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\054\uff8c\101" +
    "\uff8c\001\002\000\054\002\uff8d\012\uff8d\013\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\036\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\054\uff8d\101\uff8d\001\002\000\004\010" +
    "\374\001\002\000\054\002\uff90\012\uff90\013\uff90\016\uff90" +
    "\017\uff90\020\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\036\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\054\uff90\101\uff90\001\002\000\010\002" +
    "\ufffb\012\ufffb\051\ufffb\001\002\000\004\077\377\001\002" +
    "\000\012\026\u0104\027\u0100\030\u0102\102\u0101\001\002\000" +
    "\004\005\uff98\001\002\000\004\011\u010b\001\002\000\004" +
    "\005\uff96\001\002\000\004\005\u0105\001\002\000\004\005" +
    "\uff97\001\002\000\004\102\u0106\001\002\000\004\011\u0107" +
    "\001\002\000\050\012\u0108\013\020\016\055\017\023\020" +
    "\052\023\033\024\027\025\044\026\015\027\040\030\042" +
    "\031\034\032\045\036\050\047\046\050\030\052\051\054" +
    "\013\101\016\001\002\000\054\002\uffae\012\uffae\013\uffae" +
    "\016\uffae\017\uffae\020\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\036\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\054\uffae\101\uffae\001\002\000" +
    "\004\012\u010a\001\002\000\054\002\uffaf\012\uffaf\013\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\036\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\054\uffaf\101\uffaf\001\002\000" +
    "\050\012\u010c\013\020\016\055\017\023\020\052\023\033" +
    "\024\027\025\044\026\015\027\040\030\042\031\034\032" +
    "\045\036\050\047\046\050\030\052\051\054\013\101\016" +
    "\001\002\000\054\002\uffb0\012\uffb0\013\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\036\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\054\uffb0\101\uffb0\001\002\000\004\012\u010e" +
    "\001\002\000\054\002\uffb1\012\uffb1\013\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\036\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\054\uffb1\101\uffb1\001\002\000\006\010\u0110" +
    "\104\u0111\001\002\000\054\002\uffe7\012\uffe7\013\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\036\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\054\uffe7\101\uffe7\001\002\000\014" +
    "\006\u0114\010\u0113\114\u0112\115\u0115\116\u0116\001\002\000" +
    "\056\002\uffd8\010\u011a\012\uffd8\013\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\036\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\054\uffd8\101\uffd8\001\002\000\054\002\uffd2\012" +
    "\uffd2\013\uffd2\016\uffd2\017\uffd2\020\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\036" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\101\uffd2" +
    "\001\002\000\004\010\u0119\001\002\000\056\002\uffd7\010" +
    "\u0118\012\uffd7\013\uffd7\016\uffd7\017\uffd7\020\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\036\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\054\uffd7" +
    "\101\uffd7\001\002\000\056\002\uffda\010\u0117\012\uffda\013" +
    "\uffda\016\uffda\017\uffda\020\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\036\uffda\047" +
    "\uffda\050\uffda\051\uffda\052\uffda\054\uffda\101\uffda\001\002" +
    "\000\054\002\uffe4\012\uffe4\013\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\036\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\054\uffe4\101\uffe4\001\002\000\054\002\uffde\012\uffde" +
    "\013\uffde\016\uffde\017\uffde\020\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\036\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\054\uffde\101\uffde\001" +
    "\002\000\054\002\uffe2\012\uffe2\013\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\036\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\054\uffe2\101\uffe2\001\002\000\054\002\uffe0\012" +
    "\uffe0\013\uffe0\016\uffe0\017\uffe0\020\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\036" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\054\uffe0\101\uffe0" +
    "\001\002\000\004\005\u011c\001\002\000\004\102\u011d\001" +
    "\002\000\004\011\u011e\001\002\000\004\053\u0120\001\002" +
    "\000\010\012\uffc3\053\u0120\065\uffc3\001\002\000\012\006" +
    "\u012d\114\u012c\115\u012e\116\u012f\001\002\000\006\012\u0123" +
    "\065\u0124\001\002\000\004\012\u012b\001\002\000\054\002" +
    "\uffca\012\uffca\013\uffca\016\uffca\017\uffca\020\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\036\uffca\047\uffca\050\uffca\051\uffca\052\uffca\054\uffca" +
    "\101\uffca\001\002\000\004\104\u0125\001\002\000\050\013" +
    "\020\016\055\017\023\020\052\023\033\024\027\025\044" +
    "\026\015\027\040\030\042\031\034\032\045\036\050\047" +
    "\046\050\030\051\u0127\052\051\054\013\101\016\001\002" +
    "\000\004\051\u0129\001\002\000\004\010\u0128\001\002\000" +
    "\004\012\uffb8\001\002\000\004\010\u012a\001\002\000\004" +
    "\012\uffb9\001\002\000\054\002\uffc9\012\uffc9\013\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\036\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\054\uffc9\101\uffc9\001\002\000\004" +
    "\104\u0142\001\002\000\004\104\u013c\001\002\000\004\104" +
    "\u0136\001\002\000\004\104\u0130\001\002\000\050\013\020" +
    "\016\055\017\023\020\052\023\033\024\027\025\044\026" +
    "\015\027\040\030\042\031\034\032\045\036\050\047\046" +
    "\050\030\051\u0132\052\051\054\013\101\016\001\002\000" +
    "\004\051\u0134\001\002\000\004\010\u0133\001\002\000\010" +
    "\012\uffba\053\uffba\065\uffba\001\002\000\004\010\u0135\001" +
    "\002\000\010\012\uffbb\053\uffbb\065\uffbb\001\002\000\050" +
    "\013\020\016\055\017\023\020\052\023\033\024\027\025" +
    "\044\026\015\027\040\030\042\031\034\032\045\036\050" +
    "\047\046\050\030\051\u0138\052\051\054\013\101\016\001" +
    "\002\000\004\051\u013a\001\002\000\004\010\u0139\001\002" +
    "\000\010\012\uffbc\053\uffbc\065\uffbc\001\002\000\004\010" +
    "\u013b\001\002\000\010\012\uffbd\053\uffbd\065\uffbd\001\002" +
    "\000\050\013\020\016\055\017\023\020\052\023\033\024" +
    "\027\025\044\026\015\027\040\030\042\031\034\032\045" +
    "\036\050\047\046\050\030\051\u013e\052\051\054\013\101" +
    "\016\001\002\000\004\051\u0140\001\002\000\004\010\u013f" +
    "\001\002\000\010\012\uffc0\053\uffc0\065\uffc0\001\002\000" +
    "\004\010\u0141\001\002\000\010\012\uffc1\053\uffc1\065\uffc1" +
    "\001\002\000\050\013\020\016\055\017\023\020\052\023" +
    "\033\024\027\025\044\026\015\027\040\030\042\031\034" +
    "\032\045\036\050\047\046\050\030\051\u0144\052\051\054" +
    "\013\101\016\001\002\000\004\051\u0146\001\002\000\004" +
    "\010\u0145\001\002\000\010\012\uffbe\053\uffbe\065\uffbe\001" +
    "\002\000\004\010\u0147\001\002\000\010\012\uffbf\053\uffbf" +
    "\065\uffbf\001\002\000\006\012\uffc2\065\uffc2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\024\004\016" +
    "\005\021\011\007\015\031\017\052\020\035\021\034\023" +
    "\025\026\013\027\010\030\046\031\011\032\055\033\056" +
    "\034\020\035\053\036\036\037\040\044\030\045\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\374\004\016\005\021\011\007" +
    "\015\031\017\052\020\035\021\034\023\025\026\013\027" +
    "\010\030\046\031\011\032\055\033\056\034\020\035\053" +
    "\036\036\037\040\044\030\045\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\113\004\016\005\021\011\007" +
    "\015\031\017\052\020\035\021\034\023\025\026\013\027" +
    "\010\030\046\031\011\032\055\033\056\034\020\035\053" +
    "\036\036\037\040\044\030\045\042\001\001\000\002\001" +
    "\001\000\004\020\115\001\001\000\002\001\001\000\004" +
    "\013\123\001\001\000\004\014\153\001\001\000\004\014" +
    "\151\001\001\000\004\014\147\001\001\000\004\014\145" +
    "\001\001\000\002\001\001\000\004\014\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\143\004\016\005\021\011\007\015\031\017\052" +
    "\020\035\021\034\023\025\026\013\027\010\030\046\031" +
    "\011\032\055\033\056\034\020\035\053\036\036\037\040" +
    "\044\030\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\160\025\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\262\001\001\000\002\001\001" +
    "\000\004\025\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\274\001" +
    "\001\000\002\001\001\000\004\012\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\303\004\016\005\021\011\007\015\031" +
    "\017\052\020\035\021\034\023\025\026\013\027\010\030" +
    "\046\031\011\032\055\033\056\034\020\035\053\036\036" +
    "\037\040\044\030\045\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\310\004\016\005\021\011\007\015\031\017\052\020" +
    "\035\021\034\023\025\026\013\027\010\030\046\031\011" +
    "\032\055\033\056\034\020\035\053\036\036\037\040\044" +
    "\030\045\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\314\004\016\005\021\011" +
    "\007\015\031\017\052\020\035\021\034\023\025\026\013" +
    "\027\010\030\046\031\011\032\055\033\056\034\020\035" +
    "\053\036\036\037\040\044\030\045\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\321\004\016\005\021\011\007\015\031" +
    "\017\052\020\035\021\034\023\025\026\013\027\010\030" +
    "\046\031\011\032\055\033\056\034\020\035\053\036\036" +
    "\037\040\044\030\045\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\355\004\016\005\021\011\007\015\031\017\052\020\035" +
    "\021\034\023\025\026\013\027\010\030\046\031\011\032" +
    "\055\033\056\034\020\035\053\036\036\037\040\044\030" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\u0108\004\016\005" +
    "\021\011\007\015\031\017\052\020\035\021\034\023\025" +
    "\026\013\027\010\030\046\031\011\032\055\033\056\034" +
    "\020\035\053\036\036\037\040\044\030\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\u010c\004\016\005\021\011\007\015\031\017\052" +
    "\020\035\021\034\023\025\026\013\027\010\030\046\031" +
    "\011\032\055\033\056\034\020\035\053\036\036\037\040" +
    "\044\030\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u0120\007\u011e\001\001\000\006\006\u0147\007" +
    "\u011e\001\001\000\002\001\001\000\004\010\u0121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\u0125\004\016\005\021\011\007\015\031\017\052" +
    "\020\035\021\034\023\025\026\013\027\010\030\046\031" +
    "\011\032\055\033\056\034\020\035\053\036\036\037\040" +
    "\044\030\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\u0130\004\016" +
    "\005\021\011\007\015\031\017\052\020\035\021\034\023" +
    "\025\026\013\027\010\030\046\031\011\032\055\033\056" +
    "\034\020\035\053\036\036\037\040\044\030\045\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\003\u0136\004" +
    "\016\005\021\011\007\015\031\017\052\020\035\021\034" +
    "\023\025\026\013\027\010\030\046\031\011\032\055\033" +
    "\056\034\020\035\053\036\036\037\040\044\030\045\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\u013c" +
    "\004\016\005\021\011\007\015\031\017\052\020\035\021" +
    "\034\023\025\026\013\027\010\030\046\031\011\032\055" +
    "\033\056\034\020\035\053\036\036\037\040\044\030\045" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\u0142\004\016\005\021\011\007\015\031\017\052\020\035" +
    "\021\034\023\025\026\013\027\010\030\046\031\011\032" +
    "\055\033\056\034\020\035\053\036\036\037\040\044\030" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    FrmPrincipal v=new FrmPrincipal();    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Operaciones ::= NumeroEnt OperadoresLo Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Operaciones ::= Numero OperadoresLo NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Operaciones ::= NumeroEnt OperadoresLo NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Operaciones ::= Numero OperadoresLo Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Operaciones ::= NumeroEnt OperadoresA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Operaciones ::= Numero OperadoresA NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Operaciones ::= NumeroEnt OperadoresA NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Operaciones ::= Numero OperadoresA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OperadoresLo ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OperadoresLo ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OperadoresLo ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLo",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OperadoresA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OperadoresA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OperadoresA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OperadoresA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // posicion ::= TRASERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("posicion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // posicion ::= DELANTERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("posicion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // direccion ::= IZQUIERDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("direccion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // direccion ::= DERECHA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("direccion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FUNCIONBOCINA ::= BOCINA CORCHI CERO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONBOCINA",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FUNCIONBOCINA ::= BOCINA CORCHI UNO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONBOCINA",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CARDINAL ::= NOROESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CARDINAL ::= OESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CARDINAL ::= SUROESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CARDINAL ::= SUR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CARDINAL ::= SURESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CARDINAL ::= ESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CARDINAL ::= NORESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CARDINAL ::= NORTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CARDINAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTROLCABINA ::= GIRAR CABINA CORCHI CARDINAL CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROLCABINA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MOVCARRO ::= RETROCEDER CORCHI CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MOVCARRO ::= AVANZAR CORCHI CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MOVCARRO ::= RETROCEDER CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // MOVCARRO ::= AVANZAR CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MOVCARRO ::= RETROCEDER CORCHI NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MOVCARRO ::= AVANZAR CORCHI NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MOVCARRO ::= RETROCEDER CORCHI Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MOVCARRO ::= AVANZAR CORCHI Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOVCARRO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MANEJOGANCHO ::= GANCHO CERRAR FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + "f gjn");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MANEJOGANCHO ::= GANCHO ABRIR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MANEJOGANCHO ::= GANCHO SUBIR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MANEJOGANCHO ::= GANCHO BAJAR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANEJOGANCHO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA CERO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA NumeroEnt CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // GIRARCARRO ::= GIRAR RUEDAS CORCHI direccion COMILLA Numero CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIRARCARRO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DETENERMOVRUEDAS ::= PARAR CORCHI UNO CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DETENERMOVRUEDAS ::= PARAR CORCHI UNO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DETENERMOVRUEDAS ::= PARAR CORCHI CERO CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DETENERMOVRUEDAS ::= PARAR CORCHI NumeroEnt CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DETENERMOVRUEDAS ::= PARAR CORCHI Numero CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DETENERMOVRUEDAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // USARSENSOR ::= SENSOR CORCHI posicion CORCHD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("USARSENSOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OBTENERLUZ ::= ESTADO PARENTESISI LUZ CORCHI posicion COMILLA direccion CORCHD PARENTESISD 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + "Debes poner primero la direccion y luego la posicion");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBTENERLUZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OBTENERLUZ ::= ESTADO PARENTESISI LUZ CORCHI direccion COMILLA posicion CORCHD PARENTESISD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBTENERLUZ",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // APAGAR ::= LUZ CORCHI direccion COMILLA posicion CORCHD Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("APAGAR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ENCENDER ::= LUZ CORCHI direccion COMILLA posicion CORCHD Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCENDER",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPOS ::= ANALOGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPOS ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPOS ::= DIGITAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RELACIONALES ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RELACIONALES ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RELACIONALES ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RELACIONALES ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RELACIONALES ::= DIFERENTEDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RELACIONALES ::= IGUALQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACIONALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CondicionA ::= Identificador RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondicionA ::= CERO RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondicionA ::= UNO RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondicionA ::= NumeroEnt RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondicionA ::= Numero RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondicionA ::= Identificador RELACIONALES CERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondicionA ::= Identificador RELACIONALES UNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondicionA ::= Identificador RELACIONALES NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondicionA ::= Identificador RELACIONALES Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Valor ::= CERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Valor ::= UNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Valor ::= Operaciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Valor ::= NumeroEnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Valor ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Valor ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valor",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCIONE ::= FUNCION Identificador CORCHI TIPOS Identificador CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCIONE ::= FUNCION Identificador CORCHI TIPOS Identificador CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCIONE ::= FUNCION Identificador CORCHI CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCIONE ::= FUNCION Identificador CORCHI CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // REPETIRE ::= REPETIR CORCHI CondicionA CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIRE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BANDERAE ::= BANDERA INICIO INSTRUCCIONES FIN CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BANDERAE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CICLOS ::= CICLO CORCHI CondicionA CORCHD INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CICLOS ::= CICLO CORCHI CondicionA CORCHD INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AVANZARE ::= AVANZAR CORCHI Identificador CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AVANZARE ::= AVANZAR CORCHI Numero CORCHD FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AVANZARE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NINGUNON ::= NINGUNO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NINGUNON",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NINGUNON ::= NINGUNO Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NINGUNON",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPCIONN ::= OPCION NumeroEnt Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPCIONN ::= OPCION NumeroEnt Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPCIONN ::= OPCION CERO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCIONN ::= OPCION CERO Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCIONN ::= OPCION UNO Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCIONN ::= OPCION UNO Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCIONN ::= OPCION Numero Asignacion ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCIONN ::= OPCION Numero Asignacion INSTRUCCIONES ROMPER FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPCIONES ::= OPCIONN OPCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPCIONES ::= OPCIONN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICIONN ::= FALSO Asignacion INICIO INSTRUCCIONES FIN VERDADERO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONN ::= VERDADERO Asignacion INICIO INSTRUCCIONES FIN FALSO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONN ::= FALSO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONN ::= VERDADERO Asignacion INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONES ::= CONDICION CORCHI CondicionA CORCHD CONDICIONN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EVALUARE ::= EVALUAR CORCHI Identificador CORCHD INICIO OPCIONES NINGUNON FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUARE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EVALUARE ::= EVALUAR CORCHI Identificador CORCHD INICIO OPCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUARE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No es asignado");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Estas intentando agregar un valor diferente a 1 y 0");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion NumeroEnt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Estas intentando agregar un valor diferente a 1 y 0");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No es asignado ningun valor al identificador");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No es asignado ningun valor al identificador");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No es asignado ningun valor al identificador");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion UNO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion CERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion CERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion UNO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion CERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion UNO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion NumeroEnt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No se agrego el finalizador #");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONCONVALOR ::= DIGITAL Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion CERO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion UNO FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Deberias intentar con un numero con decimales");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " Deberias intentar con un numero sin decimales");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONCONVALOR ::= ANALOGO Identificador Asignacion Numero FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONCONVALOR ::= ENTERO Identificador Asignacion NumeroEnt FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONVALOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= ANALOGO Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= DIGITAL Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= ENTERO Identificador FINLI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= DECLARACIONCONVALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= FUNCIONBOCINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= CONTROLCABINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= MOVCARRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= MANEJOGANCHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= GIRARCARRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= DETENERMOVRUEDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= USARSENSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= OBTENERLUZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= APAGAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= ENCENDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FUNCIONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= REPETIRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= BANDERAE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CONDICIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= AVANZARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= EVALUARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // START ::= PRINCIPAL INICIO INSTRUCCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No agregaste el FIN");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= PRINCIPAL INICIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add((sright+1) + " No agregaste el FIN");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= PRINCIPAL INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= PRINCIPAL INICIO INSTRUCCIONES FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

