/* The following code was generated by JFlex 1.4.3 on 21/12/21 1:25 */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/12/21 1:25 from the specification file
 * <tt>C:/Auto-Car/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  0,  0,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5, 37,  0, 45,  3,  0, 36,  0, 39, 41,  6, 43,  5, 44,  4,  8, 
    47, 46,  2,  2,  2,  2,  2,  2,  2,  2, 42,  0, 33, 32, 34,  0, 
     0, 15, 25, 11, 21, 20, 13, 23, 22,  9, 31,  1, 24, 30, 10, 12, 
    14, 18, 16, 27, 28, 19, 26,  1, 29,  1, 17, 38,  0, 40,  0,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 35,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\20\1\1\2\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\4\1\27\1\0\1\4\1\5\1\0"+
    "\43\1\1\30\1\31\1\32\1\33\2\0\1\34\1\35"+
    "\1\0\12\1\1\36\23\1\1\37\5\1\1\40\3\1"+
    "\2\0\1\5\33\1\1\41\17\1\1\3\5\1\1\42"+
    "\1\43\4\1\1\44\1\45\1\46\3\1\1\47\14\1"+
    "\1\50\3\1\1\51\4\1\1\52\2\1\1\53\4\1"+
    "\1\54\1\55\1\56\4\1\1\57\1\60\3\1\1\61"+
    "\1\1\1\62\3\1\1\63\1\64\2\1\1\65\2\1"+
    "\1\66\2\1\1\67\4\1\1\70\1\71\1\72\1\1"+
    "\1\73\1\74\1\75\1\76\1\1\1\77\2\1\1\100"+
    "\1\101\1\1\1\102\6\1\1\103\1\104\1\105\1\106"+
    "\2\1\1\107\1\110\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\60\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\60\0\60\0\60\0\60"+
    "\0\u0510\0\60\0\60\0\60\0\60\0\u0540\0\60\0\220"+
    "\0\220\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\60\0\60\0\60\0\60\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\140\0\u0ff0\0\u1020"+
    "\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\140\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470"+
    "\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u0d80\0\u0660\0\u1560\0\u1590"+
    "\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710"+
    "\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890"+
    "\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10"+
    "\0\u1a40\0\140\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0"+
    "\0\u1d10\0\60\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\140"+
    "\0\140\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\140\0\140\0\140"+
    "\0\u1ef0\0\u1f20\0\u1f50\0\140\0\u1f80\0\u1fb0\0\u1fe0\0\u2010"+
    "\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190"+
    "\0\140\0\u21c0\0\u21f0\0\u2220\0\140\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\140\0\u2310\0\u2340\0\140\0\u2370\0\u23a0\0\u23d0"+
    "\0\u2400\0\140\0\140\0\140\0\u2430\0\u2460\0\u2490\0\u24c0"+
    "\0\140\0\140\0\u24f0\0\u2520\0\u2550\0\140\0\u2580\0\140"+
    "\0\u25b0\0\u25e0\0\u2610\0\140\0\140\0\u2640\0\u2670\0\140"+
    "\0\u26a0\0\u26d0\0\140\0\u2700\0\u2730\0\140\0\u2760\0\u2790"+
    "\0\u27c0\0\u27f0\0\140\0\140\0\140\0\u2820\0\140\0\140"+
    "\0\140\0\140\0\u2850\0\140\0\u2880\0\u28b0\0\140\0\140"+
    "\0\u28e0\0\140\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00"+
    "\0\140\0\140\0\140\0\140\0\u2a30\0\u2a60\0\140\0\140"+
    "\0\140\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\3\3\1\22\1\23\1\3\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\3\3\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\61\0\2\3\6\0\27\3"+
    "\16\0\2\3\1\0\1\3\1\4\1\0\1\52\4\0"+
    "\27\3\16\0\2\4\1\0\1\53\1\0\1\54\5\0"+
    "\27\53\22\0\1\55\1\0\1\6\51\0\2\55\5\0"+
    "\1\7\1\0\1\7\56\0\1\56\1\0\1\57\50\0"+
    "\2\3\6\0\1\3\1\60\6\3\1\61\16\3\16\0"+
    "\2\3\1\0\2\3\6\0\1\62\2\3\1\63\23\3"+
    "\16\0\2\3\1\0\2\3\6\0\1\64\2\3\1\65"+
    "\2\3\1\66\4\3\1\67\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\5\3\1\70\5\3\1\71\13\3\16\0"+
    "\2\3\1\0\2\3\6\0\1\72\5\3\1\73\20\3"+
    "\16\0\2\3\1\0\2\3\6\0\6\3\1\74\1\75"+
    "\17\3\16\0\2\3\1\0\2\3\6\0\1\3\1\76"+
    "\16\3\1\77\1\100\5\3\16\0\2\3\1\0\2\3"+
    "\6\0\3\3\1\101\6\3\1\102\1\103\13\3\16\0"+
    "\2\3\1\0\2\3\6\0\1\3\1\104\17\3\1\105"+
    "\1\106\4\3\16\0\2\3\1\0\2\3\6\0\1\107"+
    "\12\3\1\110\13\3\16\0\2\3\1\0\2\3\6\0"+
    "\1\111\5\3\1\112\20\3\16\0\2\3\1\0\2\3"+
    "\6\0\12\3\1\113\14\3\16\0\2\3\1\0\2\3"+
    "\6\0\3\3\1\114\2\3\1\115\20\3\16\0\2\3"+
    "\1\0\2\3\6\0\13\3\1\116\13\3\16\0\2\3"+
    "\1\0\2\3\6\0\6\3\1\117\3\3\1\120\1\121"+
    "\13\3\16\0\2\3\1\0\2\3\6\0\7\3\1\122"+
    "\17\3\16\0\2\3\40\0\1\123\57\0\1\124\1\0"+
    "\1\125\55\0\1\126\73\0\1\127\5\0\1\130\53\0"+
    "\2\130\2\0\1\131\1\0\1\6\51\0\2\131\1\0"+
    "\2\53\6\0\27\53\16\0\2\53\1\0\1\132\1\0"+
    "\1\54\5\0\27\132\22\0\1\55\53\0\2\55\7\56"+
    "\1\0\50\56\7\57\1\0\1\133\47\57\1\0\2\3"+
    "\6\0\1\134\26\3\16\0\2\3\1\0\2\3\6\0"+
    "\11\3\1\135\15\3\16\0\2\3\1\0\2\3\6\0"+
    "\1\3\1\136\25\3\16\0\2\3\1\0\2\3\6\0"+
    "\7\3\1\137\17\3\16\0\2\3\1\0\2\3\6\0"+
    "\2\3\1\140\24\3\16\0\2\3\1\0\2\3\6\0"+
    "\1\3\1\141\25\3\16\0\2\3\1\0\2\3\6\0"+
    "\20\3\1\142\6\3\16\0\2\3\1\0\2\3\6\0"+
    "\7\3\1\143\17\3\16\0\2\3\1\0\2\3\6\0"+
    "\2\3\1\144\24\3\16\0\2\3\1\0\2\3\6\0"+
    "\22\3\1\145\4\3\16\0\2\3\1\0\2\3\6\0"+
    "\1\3\1\146\25\3\16\0\2\3\1\0\2\3\6\0"+
    "\17\3\1\147\7\3\16\0\2\3\1\0\2\3\6\0"+
    "\7\3\1\150\17\3\16\0\2\3\1\0\2\3\6\0"+
    "\1\151\2\3\1\152\23\3\16\0\2\3\1\0\2\3"+
    "\6\0\6\3\1\153\20\3\16\0\2\3\1\0\2\3"+
    "\6\0\7\3\1\154\17\3\16\0\2\3\1\0\2\3"+
    "\6\0\6\3\1\155\20\3\16\0\2\3\1\0\2\3"+
    "\6\0\25\3\1\156\1\3\16\0\2\3\1\0\2\3"+
    "\6\0\13\3\1\157\13\3\16\0\2\3\1\0\2\3"+
    "\6\0\5\3\1\160\15\3\1\161\3\3\16\0\2\3"+
    "\1\0\2\3\6\0\23\3\1\162\3\3\16\0\2\3"+
    "\1\0\2\3\6\0\6\3\1\163\20\3\16\0\2\3"+
    "\1\0\2\3\6\0\23\3\1\164\3\3\16\0\2\3"+
    "\1\0\2\3\6\0\16\3\1\165\10\3\16\0\2\3"+
    "\1\0\2\3\6\0\7\3\1\166\7\3\1\167\7\3"+
    "\16\0\2\3\1\0\2\3\6\0\7\3\1\170\17\3"+
    "\16\0\2\3\1\0\2\3\6\0\1\3\1\171\25\3"+
    "\16\0\2\3\1\0\2\3\6\0\10\3\1\172\16\3"+
    "\16\0\2\3\1\0\2\3\6\0\2\3\1\173\24\3"+
    "\16\0\2\3\1\0\2\3\6\0\1\3\1\174\24\3"+
    "\1\175\16\0\2\3\1\0\2\3\6\0\7\3\1\176"+
    "\17\3\16\0\2\3\1\0\2\3\6\0\17\3\1\177"+
    "\7\3\16\0\2\3\1\0\2\3\6\0\7\3\1\200"+
    "\10\3\1\201\6\3\16\0\2\3\1\0\2\3\6\0"+
    "\1\3\1\202\25\3\16\0\2\3\1\0\2\3\6\0"+
    "\6\3\1\203\20\3\16\0\2\3\2\0\1\204\53\0"+
    "\2\204\2\0\1\130\1\0\1\205\51\0\2\130\2\0"+
    "\1\131\53\0\2\131\1\0\2\132\6\0\27\132\16\0"+
    "\2\132\6\57\1\206\1\0\1\133\47\57\1\0\2\3"+
    "\6\0\2\3\1\207\24\3\16\0\2\3\1\0\2\3"+
    "\6\0\12\3\1\210\14\3\16\0\2\3\1\0\2\3"+
    "\6\0\16\3\1\211\10\3\16\0\2\3\1\0\2\3"+
    "\6\0\3\3\1\212\7\3\1\213\7\3\1\214\3\3"+
    "\16\0\2\3\1\0\2\3\6\0\17\3\1\215\7\3"+
    "\16\0\2\3\1\0\2\3\6\0\14\3\1\216\12\3"+
    "\16\0\2\3\1\0\2\3\6\0\1\217\26\3\16\0"+
    "\2\3\1\0\2\3\6\0\7\3\1\220\17\3\16\0"+
    "\2\3\1\0\2\3\6\0\1\221\26\3\16\0\2\3"+
    "\1\0\2\3\6\0\23\3\1\222\3\3\16\0\2\3"+
    "\1\0\2\3\6\0\22\3\1\223\4\3\16\0\2\3"+
    "\1\0\2\3\6\0\6\3\1\224\20\3\16\0\2\3"+
    "\1\0\2\3\6\0\1\3\1\225\25\3\16\0\2\3"+
    "\1\0\2\3\6\0\24\3\1\226\2\3\16\0\2\3"+
    "\1\0\2\3\6\0\17\3\1\227\7\3\16\0\2\3"+
    "\1\0\2\3\6\0\1\230\26\3\16\0\2\3\1\0"+
    "\2\3\6\0\1\3\1\231\25\3\16\0\2\3\1\0"+
    "\2\3\6\0\5\3\1\232\21\3\16\0\2\3\1\0"+
    "\2\3\6\0\14\3\1\233\12\3\16\0\2\3\1\0"+
    "\2\3\6\0\13\3\1\234\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\7\3\1\235\17\3\16\0\2\3\1\0"+
    "\2\3\6\0\7\3\1\236\3\3\1\237\13\3\16\0"+
    "\2\3\1\0\2\3\6\0\17\3\1\240\7\3\16\0"+
    "\2\3\1\0\2\3\6\0\6\3\1\241\4\3\1\242"+
    "\13\3\16\0\2\3\1\0\2\3\6\0\1\243\26\3"+
    "\16\0\2\3\1\0\2\3\6\0\13\3\1\244\13\3"+
    "\16\0\2\3\1\0\2\3\6\0\6\3\1\245\20\3"+
    "\16\0\2\3\1\0\2\3\6\0\6\3\1\246\20\3"+
    "\16\0\2\3\1\0\2\3\6\0\2\3\1\247\24\3"+
    "\16\0\2\3\1\0\2\3\6\0\1\250\26\3\16\0"+
    "\2\3\1\0\2\3\6\0\14\3\1\251\12\3\16\0"+
    "\2\3\1\0\2\3\6\0\6\3\1\252\20\3\16\0"+
    "\2\3\1\0\2\3\6\0\14\3\1\253\12\3\16\0"+
    "\2\3\1\0\2\3\6\0\1\254\26\3\16\0\2\3"+
    "\1\0\2\3\6\0\3\3\1\255\7\3\1\256\13\3"+
    "\16\0\2\3\1\0\2\3\6\0\1\257\26\3\16\0"+
    "\2\3\1\0\2\3\6\0\22\3\1\260\4\3\16\0"+
    "\2\3\1\0\2\3\6\0\22\3\1\261\4\3\16\0"+
    "\2\3\2\0\1\204\46\0\1\262\4\0\2\204\1\0"+
    "\2\3\6\0\1\263\26\3\16\0\2\3\1\0\2\3"+
    "\6\0\1\264\26\3\16\0\2\3\1\0\2\3\6\0"+
    "\12\3\1\265\14\3\16\0\2\3\1\0\2\3\6\0"+
    "\13\3\1\266\13\3\16\0\2\3\1\0\2\3\6\0"+
    "\22\3\1\267\4\3\16\0\2\3\1\0\2\3\6\0"+
    "\13\3\1\270\13\3\16\0\2\3\1\0\2\3\6\0"+
    "\3\3\1\271\23\3\16\0\2\3\1\0\2\3\6\0"+
    "\1\272\26\3\16\0\2\3\1\0\2\3\6\0\1\3"+
    "\1\273\25\3\16\0\2\3\1\0\2\3\6\0\6\3"+
    "\1\274\20\3\16\0\2\3\1\0\2\3\6\0\3\3"+
    "\1\275\23\3\16\0\2\3\1\0\2\3\6\0\13\3"+
    "\1\276\13\3\16\0\2\3\1\0\2\3\6\0\3\3"+
    "\1\277\23\3\16\0\2\3\1\0\2\3\6\0\7\3"+
    "\1\300\17\3\16\0\2\3\1\0\2\3\6\0\2\3"+
    "\1\301\24\3\16\0\2\3\1\0\2\3\6\0\1\302"+
    "\26\3\16\0\2\3\1\0\2\3\6\0\3\3\1\303"+
    "\23\3\16\0\2\3\1\0\2\3\6\0\7\3\1\304"+
    "\17\3\16\0\2\3\1\0\2\3\6\0\10\3\1\305"+
    "\16\3\16\0\2\3\1\0\2\3\6\0\13\3\1\306"+
    "\13\3\16\0\2\3\1\0\2\3\6\0\6\3\1\307"+
    "\20\3\16\0\2\3\1\0\2\3\6\0\23\3\1\310"+
    "\3\3\16\0\2\3\1\0\2\3\6\0\3\3\1\311"+
    "\23\3\16\0\2\3\1\0\2\3\6\0\6\3\1\312"+
    "\20\3\16\0\2\3\1\0\2\3\6\0\7\3\1\313"+
    "\17\3\16\0\2\3\1\0\2\3\6\0\12\3\1\314"+
    "\14\3\16\0\2\3\1\0\2\3\6\0\14\3\1\315"+
    "\12\3\16\0\2\3\1\0\2\3\6\0\23\3\1\316"+
    "\3\3\16\0\2\3\1\0\2\3\6\0\2\3\1\317"+
    "\24\3\16\0\2\3\1\0\2\3\6\0\1\3\1\320"+
    "\25\3\16\0\2\3\1\0\2\3\6\0\7\3\1\321"+
    "\17\3\16\0\2\3\1\0\2\3\6\0\15\3\1\322"+
    "\11\3\16\0\2\3\1\0\2\3\6\0\1\3\1\323"+
    "\25\3\16\0\2\3\1\0\2\3\6\0\13\3\1\324"+
    "\13\3\16\0\2\3\1\0\2\3\6\0\7\3\1\325"+
    "\17\3\16\0\2\3\1\0\2\3\6\0\6\3\1\326"+
    "\20\3\16\0\2\3\1\0\2\3\6\0\14\3\1\327"+
    "\12\3\16\0\2\3\1\0\2\3\6\0\13\3\1\330"+
    "\13\3\16\0\2\3\1\0\2\3\6\0\22\3\1\331"+
    "\4\3\16\0\2\3\1\0\2\3\6\0\7\3\1\332"+
    "\17\3\16\0\2\3\1\0\2\3\6\0\3\3\1\333"+
    "\23\3\16\0\2\3\1\0\2\3\6\0\13\3\1\334"+
    "\13\3\16\0\2\3\1\0\2\3\6\0\3\3\1\335"+
    "\23\3\16\0\2\3\1\0\2\3\6\0\13\3\1\336"+
    "\13\3\16\0\2\3\1\0\2\3\6\0\1\3\1\337"+
    "\25\3\16\0\2\3\1\0\2\3\6\0\22\3\1\340"+
    "\4\3\16\0\2\3\1\0\2\3\6\0\23\3\1\214"+
    "\3\3\16\0\2\3\1\0\2\3\6\0\2\3\1\341"+
    "\24\3\16\0\2\3\1\0\2\3\6\0\6\3\1\342"+
    "\20\3\16\0\2\3\1\0\2\3\6\0\7\3\1\343"+
    "\17\3\16\0\2\3\1\0\2\3\6\0\1\3\1\344"+
    "\25\3\16\0\2\3\1\0\2\3\6\0\1\345\26\3"+
    "\16\0\2\3\1\0\2\3\6\0\25\3\1\346\1\3"+
    "\16\0\2\3\1\0\2\3\6\0\16\3\1\347\10\3"+
    "\16\0\2\3\1\0\2\3\6\0\6\3\1\350\20\3"+
    "\16\0\2\3\1\0\2\3\6\0\7\3\1\351\17\3"+
    "\16\0\2\3\1\0\2\3\6\0\22\3\1\352\4\3"+
    "\16\0\2\3\1\0\2\3\6\0\1\353\26\3\16\0"+
    "\2\3\1\0\2\3\6\0\2\3\1\354\24\3\16\0"+
    "\2\3\1\0\2\3\6\0\14\3\1\355\12\3\16\0"+
    "\2\3\1\0\2\3\6\0\3\3\1\356\23\3\16\0"+
    "\2\3\1\0\2\3\6\0\6\3\1\357\20\3\16\0"+
    "\2\3\1\0\2\3\6\0\3\3\1\360\23\3\16\0"+
    "\2\3\1\0\2\3\6\0\6\3\1\361\20\3\16\0"+
    "\2\3\1\0\2\3\6\0\15\3\1\362\11\3\16\0"+
    "\2\3\1\0\2\3\6\0\23\3\1\363\3\3\16\0"+
    "\2\3\1\0\2\3\6\0\3\3\1\364\23\3\16\0"+
    "\2\3\1\0\2\3\6\0\6\3\1\365\20\3\16\0"+
    "\2\3\1\0\2\3\6\0\7\3\1\366\17\3\16\0"+
    "\2\3\1\0\2\3\6\0\14\3\1\367\12\3\16\0"+
    "\2\3\1\0\2\3\6\0\6\3\1\370\20\3\16\0"+
    "\2\3\1\0\2\3\6\0\22\3\1\371\4\3\16\0"+
    "\2\3\1\0\2\3\6\0\23\3\1\372\3\3\16\0"+
    "\2\3\1\0\2\3\6\0\7\3\1\373\17\3\16\0"+
    "\2\3\1\0\2\3\6\0\7\3\1\374\17\3\16\0"+
    "\2\3\1\0\2\3\6\0\7\3\1\375\17\3\16\0"+
    "\2\3\1\0\2\3\6\0\3\3\1\376\23\3\16\0"+
    "\2\3\1\0\2\3\6\0\23\3\1\377\3\3\16\0"+
    "\2\3\1\0\2\3\6\0\1\u0100\26\3\16\0\2\3"+
    "\1\0\2\3\6\0\5\3\1\u0101\21\3\16\0\2\3"+
    "\1\0\2\3\6\0\1\u0102\26\3\16\0\2\3\1\0"+
    "\2\3\6\0\3\3\1\u0103\23\3\16\0\2\3\1\0"+
    "\2\3\6\0\7\3\1\u0104\17\3\16\0\2\3\1\0"+
    "\2\3\6\0\7\3\1\u0105\17\3\16\0\2\3\1\0"+
    "\2\3\6\0\13\3\1\u0106\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\6\3\1\u0107\20\3\16\0\2\3\1\0"+
    "\2\3\6\0\7\3\1\u0108\17\3\16\0\2\3\1\0"+
    "\2\3\6\0\17\3\1\u0109\7\3\16\0\2\3\1\0"+
    "\2\3\6\0\6\3\1\u010a\20\3\16\0\2\3\1\0"+
    "\2\3\6\0\13\3\1\u010b\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\6\3\1\u010c\20\3\16\0\2\3\1\0"+
    "\2\3\6\0\13\3\1\u010d\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\23\3\1\u010e\3\3\16\0\2\3\1\0"+
    "\2\3\6\0\13\3\1\u010f\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\6\3\1\u0110\20\3\16\0\2\3\1\0"+
    "\2\3\6\0\14\3\1\u0111\12\3\16\0\2\3\1\0"+
    "\2\3\6\0\13\3\1\u0112\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\3\3\1\u0113\23\3\16\0\2\3\1\0"+
    "\2\3\6\0\6\3\1\u0114\20\3\16\0\2\3\1\0"+
    "\2\3\6\0\14\3\1\u0115\12\3\16\0\2\3\1\0"+
    "\2\3\6\0\14\3\1\u0116\12\3\16\0\2\3\1\0"+
    "\2\3\6\0\7\3\1\u0117\17\3\16\0\2\3\1\0"+
    "\2\3\6\0\7\3\1\u0118\17\3\16\0\2\3\1\0"+
    "\2\3\6\0\13\3\1\u0119\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\6\3\1\u011a\20\3\16\0\2\3\1\0"+
    "\2\3\6\0\1\3\1\u011b\25\3\16\0\2\3\1\0"+
    "\2\3\6\0\17\3\1\u011c\7\3\16\0\2\3\1\0"+
    "\2\3\6\0\6\3\1\u011d\20\3\16\0\2\3\1\0"+
    "\2\3\6\0\13\3\1\u011e\13\3\16\0\2\3\1\0"+
    "\2\3\6\0\6\3\1\u011f\20\3\16\0\2\3\1\0"+
    "\2\3\6\0\3\3\1\u0120\23\3\16\0\2\3\1\0"+
    "\2\3\6\0\14\3\1\u0121\12\3\16\0\2\3\1\0"+
    "\2\3\6\0\7\3\1\u0122\17\3\16\0\2\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10896];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\1\11\23\1\4\11\1\1\4\11"+
    "\1\1\1\11\4\1\1\0\2\1\1\0\43\1\4\11"+
    "\2\0\2\1\1\0\50\1\2\0\54\1\1\11\160\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { return new Symbol(sym.DIGITAL, yychar, yyline , yytext());
          }
        case 75: break;
        case 28: 
          { return new Symbol(sym.Numero, yychar, yyline , yytext());
          }
        case 76: break;
        case 58: 
          { return new Symbol(sym.REPETIR, yychar, yyline , yytext());
          }
        case 77: break;
        case 43: 
          { return new Symbol(sym.INICIO, yychar, yyline , yytext());
          }
        case 78: break;
        case 59: 
          { return new Symbol(sym.ENTRADA, yychar, yyline , yytext());
          }
        case 79: break;
        case 56: 
          { return new Symbol(sym.ANALOGO, yychar, yyline , yytext());
          }
        case 80: break;
        case 65: 
          { return new Symbol(sym.TRASERA, yychar, yyline , yytext());
          }
        case 81: break;
        case 74: 
          { return new Symbol(sym.RETROCEDER, yychar, yyline , yytext());
          }
        case 82: break;
        case 22: 
          { return new Symbol(sym.CERO, yychar, yyline , yytext());
          }
        case 83: break;
        case 47: 
          { return new Symbol(sym.ROMPER, yychar, yyline , yytext());
          }
        case 84: break;
        case 7: 
          { return new Symbol(sym.Division, yychar, yyline , yytext());
          }
        case 85: break;
        case 11: 
          { return new Symbol(sym.AND, yychar, yyline , yytext());
          }
        case 86: break;
        case 5: 
          { /*Ignore*/
          }
        case 87: break;
        case 9: 
          { return new Symbol(sym.MAYOR, yychar, yyline , yytext());
          }
        case 88: break;
        case 53: 
          { return new Symbol(sym.SALIDA, yychar, yyline , yytext());
          }
        case 89: break;
        case 4: 
          { return new Symbol(sym.ERROR2, yychar, yyline , yytext());
          }
        case 90: break;
        case 16: 
          { return new Symbol(sym.PARENTESISD, yychar, yyline , yytext());
          }
        case 91: break;
        case 71: 
          { return new Symbol(sym.DELANTERA, yychar, yyline , yytext());
          }
        case 92: break;
        case 54: 
          { return new Symbol(sym.SENSOR, yychar, yyline , yytext());
          }
        case 93: break;
        case 62: 
          { return new Symbol(sym.DERECHA, yychar, yyline , yytext());
          }
        case 94: break;
        case 12: 
          { return new Symbol(sym.NOT, yychar, yyline , yytext());
          }
        case 95: break;
        case 45: 
          { return new Symbol(sym.CERRAR, yychar, yyline , yytext());
          }
        case 96: break;
        case 64: 
          { return new Symbol(sym.SURESTE, yychar, yyline , yytext());
          }
        case 97: break;
        case 30: 
          { return new Symbol(sym.FIN, yychar, yyline , yytext());
          }
        case 98: break;
        case 32: 
          { return new Symbol(sym.SUR, yychar, yyline , yytext());
          }
        case 99: break;
        case 41: 
          { return new Symbol(sym.BAJAR, yychar, yyline , yytext());
          }
        case 100: break;
        case 17: 
          { return new Symbol(sym.Asignacion, yychar, yyline , yytext());
          }
        case 101: break;
        case 15: 
          { return new Symbol(sym.CORCHD, yychar, yyline , yytext());
          }
        case 102: break;
        case 51: 
          { return new Symbol(sym.GANCHO, yychar, yyline , yytext());
          }
        case 103: break;
        case 20: 
          { return new Symbol(sym.FINLI, yychar, yyline , yytext());
          }
        case 104: break;
        case 60: 
          { return new Symbol(sym.EVALUAR, yychar, yyline , yytext());
          }
        case 105: break;
        case 3: 
          { return new Symbol(sym.NumeroEnt, yychar, yyline , yytext());
          }
        case 106: break;
        case 63: 
          { return new Symbol(sym.BANDERA, yychar, yyline , yytext());
          }
        case 107: break;
        case 6: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline , yytext());
          }
        case 108: break;
        case 35: 
          { return new Symbol(sym.CICLO, yychar, yyline , yytext());
          }
        case 109: break;
        case 52: 
          { return new Symbol(sym.BOCINA, yychar, yyline , yytext());
          }
        case 110: break;
        case 42: 
          { return new Symbol(sym.SUBIR, yychar, yyline , yytext());
          }
        case 111: break;
        case 57: 
          { return new Symbol(sym.AVANZAR, yychar, yyline , yytext());
          }
        case 112: break;
        case 26: 
          { return new Symbol(sym.DIFERENTEDE, yychar, yyline , yytext());
          }
        case 113: break;
        case 46: 
          { return new Symbol(sym.OPCION, yychar, yyline , yytext());
          }
        case 114: break;
        case 31: 
          { return new Symbol(sym.LUZ, yychar, yyline , yytext());
          }
        case 115: break;
        case 24: 
          { return new Symbol(sym.IGUALQUE, yychar, yyline , yytext());
          }
        case 116: break;
        case 70: 
          { return new Symbol(sym.PRINCIPAL, yychar, yyline , yytext());
          }
        case 117: break;
        case 18: 
          { return new Symbol(sym.Suma, yychar, yyline , yytext());
          }
        case 118: break;
        case 40: 
          { return new Symbol(sym.GIRAR, yychar, yyline , yytext());
          }
        case 119: break;
        case 49: 
          { return new Symbol(sym.ENTERO, yychar, yyline , yytext());
          }
        case 120: break;
        case 14: 
          { return new Symbol(sym.PARENTESISI, yychar, yyline , yytext());
          }
        case 121: break;
        case 69: 
          { return new Symbol(sym.CONDICION, yychar, yyline , yytext());
          }
        case 122: break;
        case 38: 
          { return new Symbol(sym.PARAR, yychar, yyline , yytext());
          }
        case 123: break;
        case 2: 
          { return new Symbol(sym.ERROR, yychar, yyline , yytext());
          }
        case 124: break;
        case 36: 
          { return new Symbol(sym.OESTE, yychar, yyline , yytext());
          }
        case 125: break;
        case 10: 
          { return new Symbol(sym.OR, yychar, yyline , yytext());
          }
        case 126: break;
        case 39: 
          { return new Symbol(sym.ABRIR, yychar, yyline , yytext());
          }
        case 127: break;
        case 50: 
          { return new Symbol(sym.ESTADO, yychar, yyline , yytext());
          }
        case 128: break;
        case 48: 
          { return new Symbol(sym.RUEDAS, yychar, yyline , yytext());
          }
        case 129: break;
        case 13: 
          { return new Symbol(sym.CORCHI, yychar, yyline , yytext());
          }
        case 130: break;
        case 66: 
          { return new Symbol(sym.NOROESTE, yychar, yyline , yytext());
          }
        case 131: break;
        case 72: 
          { return new Symbol(sym.VERDADERO, yychar, yyline , yytext());
          }
        case 132: break;
        case 33: 
          { return new Symbol(sym.ESTE, yychar, yyline , yytext());
          }
        case 133: break;
        case 19: 
          { return new Symbol(sym.Resta, yychar, yyline , yytext());
          }
        case 134: break;
        case 8: 
          { return new Symbol(sym.MENOR, yychar, yyline , yytext());
          }
        case 135: break;
        case 37: 
          { return new Symbol(sym.FALSO, yychar, yyline , yytext());
          }
        case 136: break;
        case 27: 
          { return new Symbol(sym.MAYORIGUAL, yychar, yyline , yytext());
          }
        case 137: break;
        case 25: 
          { return new Symbol(sym.MENORIGUAL, yychar, yyline , yytext());
          }
        case 138: break;
        case 21: 
          { return new Symbol(sym.UNO, yychar, yyline , yytext());
          }
        case 139: break;
        case 68: 
          { return new Symbol(sym.IZQUIERDA, yychar, yyline , yytext());
          }
        case 140: break;
        case 34: 
          { return new Symbol(sym.NORTE, yychar, yyline , yytext());
          }
        case 141: break;
        case 73: 
          { return new Symbol(sym.PROXIMIDAD, yychar, yyline , yytext());
          }
        case 142: break;
        case 23: 
          { return new Symbol(sym.Identificador, yychar, yyline , yytext());
          }
        case 143: break;
        case 55: 
          { return new Symbol(sym.NINGUNO, yychar, yyline , yytext());
          }
        case 144: break;
        case 67: 
          { return new Symbol(sym.SUROESTE, yychar, yyline , yytext());
          }
        case 145: break;
        case 44: 
          { return new Symbol(sym.CABINA, yychar, yyline , yytext());
          }
        case 146: break;
        case 1: 
          { return new Symbol(sym.ERRORP, yychar, yyline , yytext());
          }
        case 147: break;
        case 29: 
          { return new Symbol(sym.ERROR1, yychar, yyline , yytext());
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
